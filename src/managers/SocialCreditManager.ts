import { DatabaseManager } from "./DatabaseManager.js";

export interface SocialCreditEntry {
  userId: string;
  guildId: string;
  score: number;
  lastUpdated: Date;
  totalChanges: number;
}

export interface ScoreHistory {
  id: string;
  userId: string;
  guildId: string;
  scoreChange: number;
  reason: string;
  timestamp: Date;
  messageContent?: string;
}

export class SocialCreditManager {
  constructor(private db: DatabaseManager) {}

  async updateScore(
    userId: string,
    guildId: string,
    change: number,
    reason: string,
    username?: string,
    messageContent?: string
  ): Promise<number> {
    // Get current score
    const currentEntry = await this.db.getUserScore(userId, guildId);
    const previousScore = currentEntry?.score || 0; // Start with 0 points (neutral)
    const newScore = previousScore + change;

    // Update or create user entry
    await this.db.updateUserScore(userId, guildId, newScore, username);

    // Add to history
    await this.db.addScoreHistory(
      userId,
      guildId,
      change,
      previousScore,
      newScore,
      reason,
      messageContent
    );

    return newScore;
  }

  async getUserScore(userId: string, guildId: string): Promise<number> {
    const entry = await this.db.getUserScore(userId, guildId);
    return entry?.score || 0; // Default starting score (neutral)
  }

  async getServerLeaderboard(
    guildId: string,
    limit: number = 10
  ): Promise<SocialCreditEntry[]> {
    return await this.db.getServerLeaderboard(guildId, limit);
  }

  async getGlobalLeaderboard(limit: number = 10): Promise<SocialCreditEntry[]> {
    return await this.db.getGlobalLeaderboard(limit);
  }

  async getUserHistory(
    userId: string,
    guildId: string,
    limit: number = 10
  ): Promise<ScoreHistory[]> {
    return await this.db.getUserHistory(userId, guildId, limit);
  }

  async getServerStats(guildId: string): Promise<{
    totalUsers: number;
    averageScore: number;
    highestScore: number;
    lowestScore: number;
    totalScoreChanges: number;
  }> {
    return await this.db.getServerStats(guildId);
  }

  getScoreRank(score: number): {
    rank: string;
    emoji: string;
    description: string;
    color: number;
  } {
    if (score >= 2000) {
      return {
        rank: "–í–µ—Ä—Ö–æ–≤–Ω—ã–π –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω üá®üá≥",
        emoji: "üëë",
        description: "–°–ª–∞–≤–Ω—ã–π –ª–∏–¥–µ—Ä –Ω–∞—Ä–æ–¥–∞! –°–∏ –¶–∑–∏–Ω—å–ø–∏–Ω –≥–æ—Ä–¥–∏–ª—Å—è –±—ã!",
        color: 0xffd700,
      };
    } else if (score >= 1000) {
      return {
        rank: "–û–±—Ä–∞–∑—Ü–æ–≤—ã–π –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω",
        emoji: "‚≠ê",
        description:
          "–ü—Ä–∏–º–µ—Ä–Ω—ã–π —á–ª–µ–Ω –æ–±—â–µ—Å—Ç–≤–∞! –í–∞—à —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–∏–Ω–æ—Å–∏—Ç —á–µ—Å—Ç—å!",
        color: 0x00ff00,
      };
    } else if (score >= 500) {
      return {
        rank: "–•–æ—Ä–æ—à–∏–π –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω",
        emoji: "‚úÖ",
        description:
          "–î–æ—Å—Ç–æ–π–Ω—ã–π —á–ª–µ–Ω –æ–±—â–µ—Å—Ç–≤–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, —Ç–æ–≤–∞—Ä–∏—â!",
        color: 0x90ee90,
      };
    } else if (score > 0) {
      return {
        rank: "–°—Ä–µ–¥–Ω–∏–π –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω",
        emoji: "üòê",
        description:
          "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π, –Ω–æ —Å–∫—Ä–æ–º–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥. –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω.",
        color: 0xffff00,
      };
    } else if (score === 0) {
      return {
        rank: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω",
        emoji: "‚ö™",
        description:
          "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—è–≤–ª—è—Ç—å —Å–µ–±—è, —Ç–æ–≤–∞—Ä–∏—â!",
        color: 0x808080,
      };
    } else if (score >= -200) {
      return {
        rank: "–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω",
        emoji: "‚ö†Ô∏è",
        description:
          "–í–∞—à–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ. –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ.",
        color: 0xffa500,
      };
    } else if (score >= -500) {
      return {
        rank: "–ü–ª–æ—Ö–æ–π –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω",
        emoji: "‚ùå",
        description:
          "–ù–µ–ø—Ä–∏–µ–º–ª–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ! –Ø–≤–∏—Ç–µ—Å—å –≤ –±–ª–∏–∂–∞–π—à–∏–π –ª–∞–≥–µ—Ä—å –ø–µ—Ä–µ–≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è!",
        color: 0xff4500,
      };
    } else {
      return {
        rank: "–í—Ä–∞–≥ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞",
        emoji: "üíÄ",
        description:
          "–í–ù–ò–ú–ê–ù–ò–ï: –î–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–≤–∏–¥ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–≥—Ä–æ–∑—É —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –≥–∞—Ä–º–æ–Ω–∏–∏!",
        color: 0xff0000,
      };
    }
  }

  getPenaltyLevel(score: number): string | null {
    if (score <= -500) return "SEVERE";
    if (score <= -200) return "MODERATE";
    if (score <= -50) return "MILD";
    return null;
  }

  getPrivilegeLevel(score: number): string | null {
    if (score >= 1000) return "SUPREME_CITIZEN";
    if (score >= 500) return "MODEL_CITIZEN";
    if (score >= 200) return "GOOD_CITIZEN";
    return null;
  }
}
