import {
  ChatInputCommandInteraction,
  EmbedBuilder,
  PermissionFlagsBits,
  ChannelType,
  Interaction,
} from "discord.js";
import { SocialCreditManager } from "../managers/SocialCreditManager.js";
import { DatabaseManager } from "../managers/DatabaseManager.js";
import { MemeResponses } from "../utils/MemeResponses.js";
import { RateLimitManager } from "../managers/RateLimitManager.js";
import { MessageContextManager } from "../managers/MessageContextManager.js";
import { Logger } from "../utils/Logger.js";

export class CommandHandler {
  private monitoredChannels: Map<string, Set<string>> = new Map(); // guildId -> Set of channelIds

  constructor(
    private socialCreditManager: SocialCreditManager,
    private databaseManager: DatabaseManager,
    private rateLimitManager?: RateLimitManager,
    private messageContextManager?: MessageContextManager
  ) {
    this.loadMonitoredChannels();
  }

  private async loadMonitoredChannels(): Promise<void> {
    try {
      this.monitoredChannels =
        await this.databaseManager.getAllMonitoredChannels();
      Logger.info(
        `Loaded monitored channels from database: ${this.monitoredChannels.size} guilds`
      );
    } catch (error) {
      Logger.error("Failed to load monitored channels from database:", error);
    }
  }

  async handleInteraction(interaction: Interaction): Promise<void> {
    if (!interaction.isChatInputCommand()) return;

    try {
      switch (interaction.commandName) {
        case "social-credit":
          await this.handleSocialCreditCommand(interaction);
          break;
        case "leaderboard":
          await this.handleLeaderboardCommand(interaction);
          break;
        case "set-monitor-channel":
          await this.handleSetMonitorChannelCommand(interaction);
          break;
        case "social-credit-history":
          await this.handleHistoryCommand(interaction);
          break;
        case "social-credit-stats":
          await this.handleStatsCommand(interaction);
          break;
        case "rate-limit-status":
          await this.handleRateLimitStatusCommand(interaction);
          break;
        case "list-monitored-channels":
          await this.handleListMonitoredChannelsCommand(interaction);
          break;
        case "remove-monitor-channel":
          await this.handleRemoveMonitorChannelCommand(interaction);
          break;
        default:
          await interaction.reply({
            content:
              "ü§î Unknown command, citizen. The Party computers are confused.",
            ephemeral: true,
          });
      }
    } catch (error) {
      console.error("Error handling command:", error);
      await interaction.reply({
        content:
          "üö® ERROR: The social credit system has malfunctioned! Please contact your local Party representative.",
        ephemeral: true,
      });
    }
  }

  private async handleSocialCreditCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const targetUser = interaction.options.getUser("user") || interaction.user;
    const guildId = interaction.guildId || "dm";

    const score = await this.socialCreditManager.getUserScore(
      targetUser.id,
      guildId
    );
    const rankInfo = this.socialCreditManager.getScoreRank(score);

    const embed = new EmbedBuilder()
      .setColor(rankInfo.color)
      .setTitle(
        `${rankInfo.emoji} –û–¢–ß–Å–¢ –û –°–û–¶–ò–ê–õ–¨–ù–û–ú –†–ï–ô–¢–ò–ù–ì–ï ${rankInfo.emoji}`
      )
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω:** ${targetUser.username}\n**–°—Ç–∞—Ç—É—Å:** ${rankInfo.rank}`
      )
      .addFields(
        { name: "üíØ –¢–µ–∫—É—â–∏–π –†–µ–π—Ç–∏–Ω–≥", value: `${score}`, inline: true },
        { name: "üèÖ –ó–≤–∞–Ω–∏–µ", value: rankInfo.rank, inline: true },
        { name: "üìù –û—Ü–µ–Ω–∫–∞", value: rankInfo.description, inline: false }
      )
      .setThumbnail(targetUser.displayAvatarURL())
      .setFooter({
        text: `${MemeResponses.getRandomMemePhrase()}`,
        iconURL:
          "https://upload.wikimedia.org/wikipedia/commons/f/fa/Flag_of_the_People%27s_Republic_of_China.svg",
      })
      .setTimestamp();

    // Add penalty/privilege info if applicable
    const penaltyLevel = this.socialCreditManager.getPenaltyLevel(score);
    const privilegeLevel = this.socialCreditManager.getPrivilegeLevel(score);

    if (penaltyLevel) {
      const penalty = MemeResponses.getPenalties(penaltyLevel);
      embed.addFields({
        name: "‚ö†Ô∏è Active Penalties",
        value: penalty.memeText,
        inline: false,
      });
    }

    if (privilegeLevel) {
      const privilege = MemeResponses.getPrivileges(privilegeLevel);
      embed.addFields({
        name: "üéÅ Active Privileges",
        value: privilege.memeText,
        inline: false,
      });
    }

    await interaction.reply({ embeds: [embed] });
  }

  private async handleLeaderboardCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const scope = interaction.options.getString("scope") || "server";
    const guildId = interaction.guildId || "dm";

    let leaderboard;
    let title;

    if (scope === "global") {
      leaderboard = await this.socialCreditManager.getGlobalLeaderboard(10);
      title = MemeResponses.getLeaderboardTitle(true);
    } else {
      leaderboard = await this.socialCreditManager.getServerLeaderboard(
        guildId,
        10
      );
      title = MemeResponses.getLeaderboardTitle(false);
    }

    if (leaderboard.length === 0) {
      await interaction.reply({
        content:
          "üìä –î–∞–Ω–Ω—ã–µ –æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ù–∞—á–Ω–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω!",
        ephemeral: true,
      });
      return;
    }

    const embed = new EmbedBuilder()
      .setColor(0xffd700)
      .setTitle("üèÜ –¢–ê–ë–õ–ò–¶–ê –°–û–¶–ò–ê–õ–¨–ù–û–ì–û –†–ï–ô–¢–ò–ù–ì–ê üèÜ")
      .setDescription(title)
      .setTimestamp();

    let description = "";
    for (let i = 0; i < leaderboard.length; i++) {
      const entry = leaderboard[i];
      const rank = i + 1;
      const medal =
        rank === 1 ? "ü•á" : rank === 2 ? "ü•à" : rank === 3 ? "ü•â" : `${rank}.`;
      const scoreEmoji = MemeResponses.getScoreEmoji(entry.score);

      try {
        const user = await interaction.client.users.fetch(entry.userId);
        description += `${medal} **${user.username}** ${scoreEmoji} \`${entry.score}\`\n`;
      } catch {
        description += `${medal} **Unknown User** ${scoreEmoji} \`${entry.score}\`\n`;
      }
    }

    embed.addFields({
      name: "üë• –õ—É—á—à–∏–µ –ì—Ä–∞–∂–¥–∞–Ω–µ",
      value: description || "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
      inline: false,
    });

    embed.setFooter({
      text: `${MemeResponses.getRandomMemePhrase()}`,
    });

    await interaction.reply({ embeds: [embed] });
  }

  private async handleSetMonitorChannelCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    // Check if user has admin permissions
    if (
      !interaction.memberPermissions?.has(PermissionFlagsBits.Administrator)
    ) {
      await interaction.reply({
        content:
          "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–∏–π–Ω—ã–µ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã) –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!",
        ephemeral: true,
      });
      return;
    }

    const channel = interaction.options.getChannel("channel");
    const guildId = interaction.guildId!;

    if (!channel || channel.type !== ChannelType.GuildText) {
      await interaction.reply({
        content:
          "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
        ephemeral: true,
      });
      return;
    }

    // Add channel to monitored channels (both memory and database)
    await this.addMonitoredChannelPersistent(
      guildId,
      channel.id,
      channel.name || "Unknown Channel",
      interaction.user.id
    );

    const embed = new EmbedBuilder()
      .setColor(0x00ff00)
      .setTitle("üéØ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")
      .setDescription(
        `–ö–∞–Ω–∞–ª ${channel} —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞!`
      )
      .addFields(
        { name: "üì∫ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –ö–∞–Ω–∞–ª", value: `${channel}`, inline: true },
        { name: "üëÅÔ∏è –°—Ç–∞—Ç—É—Å", value: "–ê–ö–¢–ò–í–ï–ù", inline: true }
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –≤–∏–¥–∏—Ç –≤—Å—ë! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  private async handleHistoryCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const targetUser = interaction.options.getUser("user") || interaction.user;
    const guildId = interaction.guildId || "dm";

    const history = await this.socialCreditManager.getUserHistory(
      targetUser.id,
      guildId,
      10
    );

    if (history.length === 0) {
      await interaction.reply({
        content: `üìú –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è ${targetUser.username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ß–∏—Å—Ç—ã–π –ª–∏—Å—Ç, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω!`,
        ephemeral: true,
      });
      return;
    }

    const embed = new EmbedBuilder()
      .setColor(0x4169e1)
      .setTitle("üìú –ò–°–¢–û–†–ò–Ø –°–û–¶–ò–ê–õ–¨–ù–û–ì–û –†–ï–ô–¢–ò–ù–ì–ê")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω:** ${targetUser.username}\n*–ù–µ–¥–∞–≤–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞*`
      )
      .setThumbnail(targetUser.displayAvatarURL())
      .setTimestamp();

    let historyText = "";
    for (const entry of history) {
      const date = entry.timestamp.toLocaleDateString();
      const time = entry.timestamp.toLocaleTimeString();
      const changeEmoji = entry.scoreChange > 0 ? "üìà" : "üìâ";
      const changeText =
        entry.scoreChange > 0
          ? `+${entry.scoreChange}`
          : `${entry.scoreChange}`;

      historyText += `${changeEmoji} **${changeText}** - ${entry.reason}\n`;
      historyText += `*${date} at ${time}*\n\n`;
    }

    embed.addFields({
      name: "üìä –ù–µ–¥–∞–≤–Ω—è—è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
      value: historyText || "–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
      inline: false,
    });

    embed.setFooter({
      text: `${MemeResponses.getRandomMemePhrase()}`,
    });

    await interaction.reply({ embeds: [embed] });
  }

  private async handleStatsCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const guildId = interaction.guildId || "dm";

    const stats = await this.socialCreditManager.getServerStats(guildId);

    const embed = new EmbedBuilder()
      .setColor(0x9932cc)
      .setTitle("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–¶–ò–ê–õ–¨–ù–û–ì–û –†–ï–ô–¢–ò–ù–ì–ê –°–ï–†–í–ï–†–ê")
      .setDescription(MemeResponses.getStatsTitle())
      .addFields(
        {
          name: "üë• –í—Å–µ–≥–æ –ì—Ä–∞–∂–¥–∞–Ω",
          value: `${stats.totalUsers}`,
          inline: true,
        },
        {
          name: "üìä –°—Ä–µ–¥–Ω–∏–π –†–µ–π—Ç–∏–Ω–≥",
          value: `${stats.averageScore}`,
          inline: true,
        },
        {
          name: "üèÜ –í—ã—Å—à–∏–π –†–µ–π—Ç–∏–Ω–≥",
          value: `${stats.highestScore}`,
          inline: true,
        },
        {
          name: "üíÄ –ù–∏–∑—à–∏–π –†–µ–π—Ç–∏–Ω–≥",
          value: `${stats.lowestScore}`,
          inline: true,
        },
        {
          name: "üìà –í—Å–µ–≥–æ –ò–∑–º–µ–Ω–µ–Ω–∏–π",
          value: `${stats.totalScoreChanges}`,
          inline: true,
        },
        {
          name: "üéØ –£—Ä–æ–≤–µ–Ω—å –°–æ—Ü–∏–∞–ª—å–Ω–æ–π –ì–∞—Ä–º–æ–Ω–∏–∏",
          value: this.calculateHarmonyLevel(stats.averageScore),
          inline: true,
        }
      )
      .setFooter({
        text: `${MemeResponses.getRandomMemePhrase()}`,
      })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  private calculateHarmonyLevel(averageScore: number): string {
    if (averageScore >= 800) return "üåü –í–´–°–®–ê–Ø –ì–ê–†–ú–û–ù–ò–Ø";
    if (averageScore >= 400) return "‚úÖ –í–´–°–û–ö–ê–Ø –ì–ê–†–ú–û–ù–ò–Ø";
    if (averageScore >= 100) return "üòê –£–ú–ï–†–ï–ù–ù–ê–Ø –ì–ê–†–ú–û–ù–ò–Ø";
    if (averageScore >= -100) return "‚ö™ –ù–ï–ô–¢–†–ê–õ–¨–ù–ê–Ø –ì–ê–†–ú–û–ù–ò–Ø";
    if (averageScore >= -300) return "‚ö†Ô∏è –ù–ò–ó–ö–ê–Ø –ì–ê–†–ú–û–ù–ò–Ø";
    return "üö® –°–û–¶–ò–ê–õ–¨–ù–´–ï –ë–ï–°–ü–û–†–Ø–î–ö–ò";
  }

  private async handleRateLimitStatusCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    if (!this.rateLimitManager) {
      await interaction.reply({
        content: "‚ùå Rate limit manager not available.",
        ephemeral: true,
      });
      return;
    }

    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    const status = this.rateLimitManager.getUserStatus(userId, guildId);
    const contextStats = this.messageContextManager?.getChannelStats() || {
      totalChannels: 0,
      totalMessages: 0,
    };

    const embed = new EmbedBuilder()
      .setColor(0x4169e1)
      .setTitle("‚è±Ô∏è –°–¢–ê–¢–£–° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –†–ï–ô–¢–ò–ù–ì–ê")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω:** ${interaction.user.username}\n*–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è*`
      )
      .addFields(
        {
          name: "üéØ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –†–µ–π—Ç–∏–Ω–≥",
          value: status.canReceivePositive
            ? "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
            : `‚ùå –ö—É–ª–¥–∞—É–Ω: ${Math.ceil(status.timeUntilPositive / 60000)} –º–∏–Ω`,
          inline: true,
        },
        {
          name: "üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤ –û–∫–Ω–µ",
          value: `${status.messagesInWindow}/10`,
          inline: true,
        },
        {
          name: "üìù –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö",
          value: `${status.bufferedMessages}`,
          inline: true,
        },
        {
          name: "‚è∞ –û–∫–Ω–æ –°–±—Ä–æ—Å–∏—Ç—Å—è",
          value: `${Math.ceil(status.windowTimeLeft / 1000)} —Å–µ–∫`,
          inline: true,
        },
        {
          name: "üåê –ö–æ–Ω—Ç–µ–∫—Å—Ç –ö–∞–Ω–∞–ª–æ–≤",
          value: `${contextStats.totalChannels}`,
          inline: true,
        },
        {
          name: "üí¨ –í—Å–µ–≥–æ –°–æ–æ–±—â–µ–Ω–∏–π",
          value: `${contextStats.totalMessages}`,
          inline: true,
        }
      )
      .setFooter({
        text: "–ü–∞—Ä—Ç–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ç–µ–º–ø! üëÅÔ∏è",
      })
      .setTimestamp();

    // Add warning if user is being rate limited
    if (!status.canReceivePositive || status.messagesInWindow >= 8) {
      embed.addFields({
        name: "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
        value:
          status.messagesInWindow >= 8
            ? "üö® –ë–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π! –°–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω—ã."
            : "‚è∞ –ö—É–ª–¥–∞—É–Ω –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω.",
        inline: false,
      });
    }

    await interaction.reply({ embeds: [embed], ephemeral: true });
  }

  private async handleListMonitoredChannelsCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    // Check if user has admin permissions
    if (
      !interaction.memberPermissions?.has(PermissionFlagsBits.Administrator)
    ) {
      await interaction.reply({
        content:
          "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–∏–π–Ω—ã–µ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã) –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!",
        ephemeral: true,
      });
      return;
    }

    const guildId = interaction.guildId!;

    try {
      const channelInfo =
        await this.databaseManager.getMonitoredChannelInfo(guildId);

      if (channelInfo.length === 0) {
        await interaction.reply({
          content:
            "üìä –í —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/set-monitor-channel` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.",
          ephemeral: true,
        });
        return;
      }

      const embed = new EmbedBuilder()
        .setColor(0x4169e1)
        .setTitle("üì∫ –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–ï –ö–ê–ù–ê–õ–´")
        .setDescription("*–ö–∞–Ω–∞–ª—ã –ø–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞*")
        .setTimestamp();

      let description = "";
      for (const info of channelInfo) {
        const channel = `<#${info.channelId}>`;
        const addedDate = info.addedAt.toLocaleDateString();
        description += `${channel}\n`;
        description += `‚îî –î–æ–±–∞–≤–ª–µ–Ω: ${addedDate} | <@${info.addedBy}>\n\n`;
      }

      embed.addFields({
        name: `üëÅÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${channelInfo.length}`,
        value: description,
        inline: false,
      });

      embed.setFooter({ text: "–ü–∞—Ä—Ç–∏—è –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –≤—Å–µ–º–∏! üëÅÔ∏è" });

      await interaction.reply({ embeds: [embed], ephemeral: true });
    } catch (error) {
      Logger.error("Error listing monitored channels:", error);
      await interaction.reply({
        content: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.",
        ephemeral: true,
      });
    }
  }

  private async handleRemoveMonitorChannelCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    // Check if user has admin permissions
    if (
      !interaction.memberPermissions?.has(PermissionFlagsBits.Administrator)
    ) {
      await interaction.reply({
        content:
          "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–∏–π–Ω—ã–µ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã) –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º!",
        ephemeral: true,
      });
      return;
    }

    const channel = interaction.options.getChannel("channel");
    const guildId = interaction.guildId!;

    if (!channel || channel.type !== ChannelType.GuildText) {
      await interaction.reply({
        content: "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª.",
        ephemeral: true,
      });
      return;
    }

    try {
      const removed = await this.removeMonitoredChannelPersistent(
        guildId,
        channel.id
      );

      if (removed) {
        const embed = new EmbedBuilder()
          .setColor(0xff4500)
          .setTitle("üö´ –ú–û–ù–ò–¢–û–†–ò–ù–ì –û–¢–ö–õ–Æ–ß–Å–ù")
          .setDescription(
            `–ö–∞–Ω–∞–ª ${channel} –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.`
          )
          .addFields(
            { name: "üì∫ –ö–∞–Ω–∞–ª", value: `${channel}`, inline: true },
            { name: "üëÅÔ∏è –°—Ç–∞—Ç—É—Å", value: "–û–¢–ö–õ–Æ–ß–Å–ù", inline: true }
          )
          .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º." })
          .setTimestamp();

        await interaction.reply({ embeds: [embed] });
      } else {
        await interaction.reply({
          content: `‚ùå –ö–∞–Ω–∞–ª ${channel} –Ω–µ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.`,
          ephemeral: true,
        });
      }
    } catch (error) {
      Logger.error("Error removing monitored channel:", error);
      await interaction.reply({
        content: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
        ephemeral: true,
      });
    }
  }

  public isChannelMonitored(guildId: string, channelId: string): boolean {
    return this.monitoredChannels.get(guildId)?.has(channelId) || false;
  }

  public addMonitoredChannel(guildId: string, channelId: string): void {
    if (!this.monitoredChannels.has(guildId)) {
      this.monitoredChannels.set(guildId, new Set());
    }
    this.monitoredChannels.get(guildId)!.add(channelId);
  }

  public removeMonitoredChannel(guildId: string, channelId: string): void {
    this.monitoredChannels.get(guildId)?.delete(channelId);
  }

  private async addMonitoredChannelPersistent(
    guildId: string,
    channelId: string,
    channelName: string,
    addedBy: string
  ): Promise<void> {
    try {
      // Add to database
      await this.databaseManager.addMonitoredChannel(
        guildId,
        channelId,
        channelName,
        addedBy
      );

      // Add to memory
      this.addMonitoredChannel(guildId, channelId);

      Logger.info(
        `Added monitored channel ${channelId} (${channelName}) for guild ${guildId}`
      );
    } catch (error) {
      Logger.error("Failed to add monitored channel:", error);
      throw error;
    }
  }

  private async removeMonitoredChannelPersistent(
    guildId: string,
    channelId: string
  ): Promise<boolean> {
    try {
      // Remove from database
      const removed = await this.databaseManager.removeMonitoredChannel(
        guildId,
        channelId
      );

      if (removed) {
        // Remove from memory
        this.removeMonitoredChannel(guildId, channelId);
        Logger.info(
          `Removed monitored channel ${channelId} for guild ${guildId}`
        );
      }

      return removed;
    } catch (error) {
      Logger.error("Failed to remove monitored channel:", error);
      throw error;
    }
  }
}
