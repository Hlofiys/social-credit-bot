import {
  ChatInputCommandInteraction,
  EmbedBuilder,
  PermissionFlagsBits,
  ChannelType,
  Interaction,
} from "discord.js";
import { SocialCreditManager } from "../managers/SocialCreditManager.js";
import { DatabaseManager } from "../managers/DatabaseManager.js";
import { EffectManager } from "../managers/EffectManager.js";
import { MemeResponses } from "../utils/MemeResponses.js";
import { RateLimitManager } from "../managers/RateLimitManager.js";
import { MessageContextManager } from "../managers/MessageContextManager.js";
import { Logger } from "../utils/Logger.js";
import { CONFIG } from "../config.js";

export class CommandHandler {
  private monitoredChannels: Map<string, Set<string>> = new Map(); // guildId -> Set of channelIds

  constructor(
    private socialCreditManager: SocialCreditManager,
    private databaseManager: DatabaseManager,
    private effectManager: EffectManager,
    private rateLimitManager?: RateLimitManager,
    private messageContextManager?: MessageContextManager
  ) {
    this.loadMonitoredChannels();
  }

  private async loadMonitoredChannels(): Promise<void> {
    try {
      this.monitoredChannels =
        await this.databaseManager.getAllMonitoredChannels();
      Logger.info(
        `Loaded monitored channels from database: ${this.monitoredChannels.size} guilds`
      );
    } catch (error) {
      Logger.error("Failed to load monitored channels from database:", error);
    }
  }

  async handleInteraction(interaction: Interaction): Promise<void> {
    if (!interaction.isChatInputCommand()) return;

    try {
      switch (interaction.commandName) {
        case "social-credit":
          await this.handleSocialCreditCommand(interaction);
          break;
        case "leaderboard":
          await this.handleLeaderboardCommand(interaction);
          break;
        case "set-monitor-channel":
          await this.handleSetMonitorChannelCommand(interaction);
          break;
        case "social-credit-history":
          await this.handleHistoryCommand(interaction);
          break;
        case "social-credit-stats":
          await this.handleStatsCommand(interaction);
          break;
        case "rate-limit-status":
          await this.handleRateLimitStatusCommand(interaction);
          break;
        case "list-monitored-channels":
          await this.handleListMonitoredChannelsCommand(interaction);
          break;
        case "remove-monitor-channel":
          await this.handleRemoveMonitorChannelCommand(interaction);
          break;
        case "redeem-myself":
          await this.handleRedeemMyselfCommand(interaction);
          break;
        case "enforce-harmony":
          await this.handleEnforceHarmonyCommand(interaction);
          break;
        case "claim-daily":
          await this.handleClaimDailyCommand(interaction);
          break;
        case "spread-propaganda":
          await this.handleSpreadPropagandaCommand(interaction);
          break;
        case "praise-bot":
          await this.handlePraiseBotCommand(interaction);
          break;
        case "report-mistake":
          await this.handleReportMistakeCommand(interaction);
          break;
        case "work-for-the-party":
          await this.handleWorkForThePartyCommand(interaction);
          break;
        default:
          await interaction.reply({
            content:
              "ü§î Unknown command, citizen. The Party computers are confused.",
            ephemeral: true,
          });
      }
    } catch (error) {
      console.error("Error handling command:", error);
      await interaction.reply({
        content:
          "üö® ERROR: The social credit system has malfunctioned! Please contact your local Party representative.",
        ephemeral: true,
      });
    }
  }

  private async handleSocialCreditCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const targetUser = interaction.options.getUser("user") || interaction.user;
    const guildId = interaction.guildId || "dm";

    const score = await this.socialCreditManager.getUserScore(
      targetUser.id,
      guildId
    );
    const rankInfo = this.socialCreditManager.getScoreRank(score);

    const embed = new EmbedBuilder()
      .setColor(rankInfo.color)
      .setTitle(
        `${rankInfo.emoji} –û–¢–ß–Å–¢ –û –°–û–¶–ò–ê–õ–¨–ù–û–ú –†–ï–ô–¢–ò–ù–ì–ï ${rankInfo.emoji}`
      )
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω:** ${targetUser.username}\n**–°—Ç–∞—Ç—É—Å:** ${rankInfo.rank}`
      )
      .addFields(
        { name: "üíØ –¢–µ–∫—É—â–∏–π –†–µ–π—Ç–∏–Ω–≥", value: `${score}`, inline: true },
        { name: "üèÖ –ó–≤–∞–Ω–∏–µ", value: rankInfo.rank, inline: true },
        { name: "üìù –û—Ü–µ–Ω–∫–∞", value: rankInfo.description, inline: false }
      )
      .setThumbnail(targetUser.displayAvatarURL())
      .setFooter({
        text: `${MemeResponses.getRandomMemePhrase()}`,
        iconURL:
          "https://upload.wikimedia.org/wikipedia/commons/f/fa/Flag_of_the_People%27s_Republic_of_China.svg",
      })
      .setTimestamp();

    // Add active effects info
    const activeEffects = this.effectManager.getActiveEffects(targetUser.id);
    const penaltyLevel = this.socialCreditManager.getPenaltyLevel(score);
    const privilegeLevel = this.socialCreditManager.getPrivilegeLevel(score);

    if (penaltyLevel) {
      const penalty = MemeResponses.getPenalties(penaltyLevel);
      embed.addFields({
        name: "‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ù–∞–∫–∞–∑–∞–Ω–∏—è",
        value: penalty.memeText,
        inline: false,
      });
    }

    if (privilegeLevel) {
      const privilege = MemeResponses.getPrivileges(privilegeLevel);
      embed.addFields({
        name: "üéÅ –ê–∫—Ç–∏–≤–Ω—ã–µ –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏",
        value: privilege.memeText,
        inline: false,
      });
    }

    // Add active effects
    if (activeEffects.length > 0) {
      let effectsText = "";
      for (const effect of activeEffects) {
        const timeLeft = Math.ceil((effect.expiresAt.getTime() - Date.now()) / (60 * 1000));
        const effectName = this.getEffectDisplayName(effect.effectType);
        effectsText += `‚Ä¢ ${effectName} (${timeLeft} –º–∏–Ω)\n`;
      }
      embed.addFields({
        name: "üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –≠—Ñ—Ñ–µ–∫—Ç—ã",
        value: effectsText || "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤",
        inline: false,
      });
    }

    // Add daily claim status
    const lastClaim = activeEffects.find(e => e.effectType === "DAILY_CLAIM_RESET" && e.metadata?.type === "daily_claim");
    if (lastClaim) {
      const timeLeft = Math.ceil((lastClaim.expiresAt.getTime() - Date.now()) / (60 * 60 * 1000));
      embed.addFields({
        name: "‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ë–æ–Ω—É—Å",
        value: `–î–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${timeLeft} —á–∞—Å–æ–≤`,
        inline: true,
      });
    } else {
      embed.addFields({
        name: "‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ë–æ–Ω—É—Å",
        value: "–î–æ—Å—Ç—É–ø–µ–Ω —Å–µ–π—á–∞—Å!",
        inline: true,
      });
    }

    await interaction.reply({ embeds: [embed] });
  }

  private async handleLeaderboardCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const scope = interaction.options.getString("scope") || "server";
    const guildId = interaction.guildId || "dm";

    let leaderboard;
    let title;
    let embedColor = 0xffd700;
    let embedTitle = "üèÜ –¢–ê–ë–õ–ò–¶–ê –°–û–¶–ò–ê–õ–¨–ù–û–ì–û –†–ï–ô–¢–ò–ù–ì–ê üèÜ";

    // Check for active events that affect appearance
    // TODO: Implement event tracking for visual flair
    // For now, keep default appearance

    if (scope === "global") {
      leaderboard = await this.socialCreditManager.getGlobalLeaderboard(10);
      title = MemeResponses.getLeaderboardTitle(true);
    } else {
      leaderboard = await this.socialCreditManager.getServerLeaderboard(
        guildId,
        10
      );
      title = MemeResponses.getLeaderboardTitle(false);
    }

    if (leaderboard.length === 0) {
      await interaction.reply({
        content:
          "üìä –î–∞–Ω–Ω—ã–µ –æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ù–∞—á–Ω–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω!",
        ephemeral: true,
      });
      return;
    }

    const embed = new EmbedBuilder()
      .setColor(embedColor)
      .setTitle(embedTitle)
      .setDescription(title)
      .setTimestamp();

    let description = "";
    for (let i = 0; i < leaderboard.length; i++) {
      const entry = leaderboard[i];
      const rank = i + 1;
      const medal =
        rank === 1 ? "ü•á" : rank === 2 ? "ü•à" : rank === 3 ? "ü•â" : `${rank}.`;
      const scoreEmoji = MemeResponses.getScoreEmoji(entry.score);

      try {
        const user = await interaction.client.users.fetch(entry.userId);
        description += `${medal} **${user.username}** ${scoreEmoji} \`${entry.score}\`\n`;
      } catch {
        description += `${medal} **Unknown User** ${scoreEmoji} \`${entry.score}\`\n`;
      }
    }

    embed.addFields({
      name: "üë• –õ—É—á—à–∏–µ –ì—Ä–∞–∂–¥–∞–Ω–µ",
      value: description || "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
      inline: false,
    });

    embed.setFooter({
      text: `${MemeResponses.getRandomMemePhrase()}`,
    });

    await interaction.reply({ embeds: [embed] });
  }

  private async handleSetMonitorChannelCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    // Check if user has admin permissions
    if (
      !interaction.memberPermissions?.has(PermissionFlagsBits.Administrator)
    ) {
      await interaction.reply({
        content:
          "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–∏–π–Ω—ã–µ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã) –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!",
        ephemeral: true,
      });
      return;
    }

    const channel = interaction.options.getChannel("channel");
    const guildId = interaction.guildId!;

    if (!channel || channel.type !== ChannelType.GuildText) {
      await interaction.reply({
        content:
          "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
        ephemeral: true,
      });
      return;
    }

    // Add channel to monitored channels (both memory and database)
    await this.addMonitoredChannelPersistent(
      guildId,
      channel.id,
      channel.name || "Unknown Channel",
      interaction.user.id
    );

    const embed = new EmbedBuilder()
      .setColor(0x00ff00)
      .setTitle("üéØ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")
      .setDescription(
        `–ö–∞–Ω–∞–ª ${channel} —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞!`
      )
      .addFields(
        { name: "üì∫ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –ö–∞–Ω–∞–ª", value: `${channel}`, inline: true },
        { name: "üëÅÔ∏è –°—Ç–∞—Ç—É—Å", value: "–ê–ö–¢–ò–í–ï–ù", inline: true }
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –≤–∏–¥–∏—Ç –≤—Å—ë! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  private async handleHistoryCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const targetUser = interaction.options.getUser("user") || interaction.user;
    const guildId = interaction.guildId || "dm";

    const history = await this.socialCreditManager.getUserHistory(
      targetUser.id,
      guildId,
      10
    );

    if (history.length === 0) {
      await interaction.reply({
        content: `üìú –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è ${targetUser.username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ß–∏—Å—Ç—ã–π –ª–∏—Å—Ç, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω!`,
        ephemeral: true,
      });
      return;
    }

    const embed = new EmbedBuilder()
      .setColor(0x4169e1)
      .setTitle("üìú –ò–°–¢–û–†–ò–Ø –°–û–¶–ò–ê–õ–¨–ù–û–ì–û –†–ï–ô–¢–ò–ù–ì–ê")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω:** ${targetUser.username}\n*–ù–µ–¥–∞–≤–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞*`
      )
      .setThumbnail(targetUser.displayAvatarURL())
      .setTimestamp();

    let historyText = "";
    for (const entry of history) {
      const date = entry.timestamp.toLocaleDateString();
      const time = entry.timestamp.toLocaleTimeString();
      const changeEmoji = entry.scoreChange > 0 ? "üìà" : "üìâ";
      const changeText =
        entry.scoreChange > 0
          ? `+${entry.scoreChange}`
          : `${entry.scoreChange}`;

      historyText += `${changeEmoji} **${changeText}** - ${entry.reason}\n`;
      historyText += `*${date} at ${time}*\n\n`;
    }

    embed.addFields({
      name: "üìä –ù–µ–¥–∞–≤–Ω—è—è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
      value: historyText || "–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
      inline: false,
    });

    embed.setFooter({
      text: `${MemeResponses.getRandomMemePhrase()}`,
    });

    await interaction.reply({ embeds: [embed] });
  }

  private async handleStatsCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const guildId = interaction.guildId || "dm";

    const stats = await this.socialCreditManager.getServerStats(guildId);

    const embed = new EmbedBuilder()
      .setColor(0x9932cc)
      .setTitle("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–¶–ò–ê–õ–¨–ù–û–ì–û –†–ï–ô–¢–ò–ù–ì–ê –°–ï–†–í–ï–†–ê")
      .setDescription(MemeResponses.getStatsTitle())
      .addFields(
        {
          name: "üë• –í—Å–µ–≥–æ –ì—Ä–∞–∂–¥–∞–Ω",
          value: `${stats.totalUsers}`,
          inline: true,
        },
        {
          name: "üìä –°—Ä–µ–¥–Ω–∏–π –†–µ–π—Ç–∏–Ω–≥",
          value: `${stats.averageScore}`,
          inline: true,
        },
        {
          name: "üèÜ –í—ã—Å—à–∏–π –†–µ–π—Ç–∏–Ω–≥",
          value: `${stats.highestScore}`,
          inline: true,
        },
        {
          name: "üíÄ –ù–∏–∑—à–∏–π –†–µ–π—Ç–∏–Ω–≥",
          value: `${stats.lowestScore}`,
          inline: true,
        },
        {
          name: "üìà –í—Å–µ–≥–æ –ò–∑–º–µ–Ω–µ–Ω–∏–π",
          value: `${stats.totalScoreChanges}`,
          inline: true,
        },
        {
          name: "üéØ –£—Ä–æ–≤–µ–Ω—å –°–æ—Ü–∏–∞–ª—å–Ω–æ–π –ì–∞—Ä–º–æ–Ω–∏–∏",
          value: this.calculateHarmonyLevel(stats.averageScore),
          inline: true,
        }
      )
      .setFooter({
        text: `${MemeResponses.getRandomMemePhrase()}`,
      })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  private async handleClaimDailyCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check if already claimed today
    const lastClaim = this.effectManager.getEffectsByType(userId, "DAILY_CLAIM_RESET").find(
      e => e.metadata?.type === "daily_claim"
    );
    if (lastClaim) {
      const timeLeft = lastClaim.expiresAt.getTime() - Date.now();
      if (timeLeft > 0) {
        const hoursLeft = Math.ceil(timeLeft / (60 * 60 * 1000));
        await interaction.reply({
          content: `‚è∞ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è! –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${hoursLeft} —á–∞—Å–æ–≤.`,
          ephemeral: true,
        });
        return;
      }
    }

    // Get user's rank to determine bonus amount
    const userScore = await this.socialCreditManager.getUserScore(userId, guildId);
    const rankInfo = this.socialCreditManager.getScoreRank(userScore);

    let bonusAmount = 0;
    if (userScore >= CONFIG.SCORE_THRESHOLDS.PRIVILEGES.SUPREME_CITIZEN) {
      bonusAmount = CONFIG.DAILY_CLAIMS.SUPREME_CITIZEN;
    } else if (userScore >= CONFIG.SCORE_THRESHOLDS.PRIVILEGES.MODEL_CITIZEN) {
      bonusAmount = CONFIG.DAILY_CLAIMS.MODEL_CITIZEN;
    } else if (userScore >= CONFIG.SCORE_THRESHOLDS.PRIVILEGES.GOOD_CITIZEN) {
      bonusAmount = CONFIG.DAILY_CLAIMS.GOOD_CITIZEN;
    } else {
      await interaction.reply({
        content: "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞! –ü–æ–≤—ã—Å—å—Ç–µ —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥.",
        ephemeral: true,
      });
      return;
    }

    // Apply the bonus
    const newScore = await this.socialCreditManager.updateScore(
      userId,
      guildId,
      bonusAmount,
      `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ü–∞—Ä—Ç–∏–∏ (${rankInfo.rank})`,
      interaction.user.username
    );

    // Set claim cooldown
    await this.effectManager.applyEffect(
      userId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.EFFECT_DURATIONS.DAILY_CLAIM_RESET,
      undefined,
      { type: "daily_claim" }
    );

    const embed = new EmbedBuilder()
      .setColor(0x00ff00)
      .setTitle("üéÅ –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° –ü–ê–†–¢–ò–ò")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
        `–ü–∞—Ä—Ç–∏—è –±–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω–∞ –∫ –≤–∞–º —Å–µ–≥–æ–¥–Ω—è! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ –≤–∞—à—É –ª–æ—è–ª—å–Ω–æ—Å—Ç—å.`
      )
      .addFields(
        { name: "üèÖ –ó–≤–∞–Ω–∏–µ", value: rankInfo.rank, inline: true },
        { name: "üí∞ –ë–æ–Ω—É—Å", value: `+${bonusAmount}`, inline: true },
        { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ —Å–≤–æ–∏—Ö –ª—É—á—à–∏—Ö –≥—Ä–∞–∂–¥–∞–Ω–∞—Ö! üá®üá≥" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  private async handleSpreadPropagandaCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check if user has high enough score
    const userScore = await this.socialCreditManager.getUserScore(userId, guildId);
    if (userScore < CONFIG.SCORE_THRESHOLDS.PRIVILEGES.MODEL_CITIZEN) {
      await interaction.reply({
        content: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥! –¢—Ä–µ–±—É–µ—Ç—Å—è ${CONFIG.SCORE_THRESHOLDS.PRIVILEGES.MODEL_CITIZEN}+ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã.`,
        ephemeral: true,
      });
      return;
    }

    // Check cooldown
    const lastPropaganda = this.effectManager.getEffectsByType(userId, "DAILY_CLAIM_RESET").find(
      e => e.metadata?.type === "propaganda_cooldown"
    );
    if (lastPropaganda) {
      const timeLeft = lastPropaganda.expiresAt.getTime() - Date.now();
      if (timeLeft > 0) {
        const hoursLeft = Math.ceil(timeLeft / (60 * 60 * 1000));
        await interaction.reply({
          content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${hoursLeft} —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã!`,
          ephemeral: true,
        });
        return;
      }
    }

    // Select random propaganda image
    const imageUrl = CONFIG.PROPAGANDA_IMAGES[
      Math.floor(Math.random() * CONFIG.PROPAGANDA_IMAGES.length)
    ];

    // Create embed with propaganda
    const embed = new EmbedBuilder()
      .setColor(0xffd700)
      .setTitle("üá®üá≥ –°–õ–ê–í–ê –ü–ê–†–¢–ò–ò! üá®üá≥")
      .setDescription(
        `**${interaction.user.username}** –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–∞–º –æ –≤–µ–ª–∏—á–∏–∏ –ü–∞—Ä—Ç–∏–∏!\n\n` +
        `*"–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—Å—Ç–≤–æ –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ü–∞—Ä—Ç–∏–∏!"*`
      )
      .setImage(imageUrl)
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤–∞! ‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩ‰∏áÂ≤Å!" })
      .setTimestamp();

    // Send to current channel
    await interaction.reply({ embeds: [embed] });

    // Apply bonus
    const newScore = await this.socialCreditManager.updateScore(
      userId,
      guildId,
      CONFIG.SCORE_CHANGES.SPREAD_PROPAGANDA_BONUS,
      "–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–∞–≤–Ω–æ–π –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã –ü–∞—Ä—Ç–∏–∏",
      interaction.user.username
    );

    // Set cooldown
    await this.effectManager.applyEffect(
      userId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.COOLDOWNS.SPREAD_PROPAGANDA,
      undefined,
      { type: "propaganda_cooldown" }
    );

    // Send confirmation
    const confirmEmbed = new EmbedBuilder()
      .setColor(0x00ff00)
      .setTitle("üì¢ –ü–†–û–ü–ê–ì–ê–ù–î–ê –†–ê–°–ü–†–û–°–¢–†–ê–ù–ï–ù–ê!")
      .setDescription(
        `**–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
        `–ü–∞—Ä—Ç–∏—è —Ü–µ–Ω–∏—Ç –≤–∞—à—É –ø–æ–º–æ—â—å –≤ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–∏–Ω—ã.`
      )
      .addFields(
        { name: "üí∞ –ë–æ–Ω—É—Å", value: `+${CONFIG.SCORE_CHANGES.SPREAD_PROPAGANDA_BONUS}`, inline: true },
        { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
      )
      .setFooter({ text: "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª—É–∂–∏—Ç—å –ü–∞—Ä—Ç–∏–∏! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.followUp({ embeds: [confirmEmbed], ephemeral: true });
  }

  private async handlePraiseBotCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check cooldown
    const lastPraise = this.effectManager.getEffectsByType(userId, "DAILY_CLAIM_RESET").find(
      e => e.metadata?.type === "praise_cooldown"
    );
    if (lastPraise) {
      const timeLeft = lastPraise.expiresAt.getTime() - Date.now();
      if (timeLeft > 0) {
        const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
        await interaction.reply({
          content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${minutesLeft} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ö–≤–∞–ª–æ–π –±–æ—Ç–∞!`,
          ephemeral: true,
        });
        return;
      }
    }

    // Apply small bonus
    const newScore = await this.socialCreditManager.updateScore(
      userId,
      guildId,
      CONFIG.SCORE_CHANGES.PRAISE_BOT_BONUS,
      "–ü–æ—Ö–≤–∞–ª–∞ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞",
      interaction.user.username
    );

    // Set cooldown
    await this.effectManager.applyEffect(
      userId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.COOLDOWNS.PRAISE_BOT,
      undefined,
      { type: "praise_cooldown" }
    );

    const embed = new EmbedBuilder()
      .setColor(0x00ff00)
      .setTitle("üôè –°–ü–ê–°–ò–ë–û –ó–ê –ü–û–•–í–ê–õ–£!")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
        `–ü–∞—Ä—Ç–∏—è —Ü–µ–Ω–∏—Ç –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞!`
      )
      .addFields(
        { name: "üí∞ –ë–æ–Ω—É—Å", value: `+${CONFIG.SCORE_CHANGES.PRAISE_BOT_BONUS}`, inline: true },
        { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  private async handleReportMistakeCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check cooldown
    const lastReport = this.effectManager.getEffectsByType(userId, "DAILY_CLAIM_RESET").find(
      e => e.metadata?.type === "report_cooldown"
    );
    if (lastReport) {
      const timeLeft = lastReport.expiresAt.getTime() - Date.now();
      if (timeLeft > 0) {
        const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
        await interaction.reply({
          content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${minutesLeft} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ—Ç—á—ë—Ç–æ–º –æ–± –æ—à–∏–±–∫–µ!`,
          ephemeral: true,
        });
        return;
      }
    }

    // For now, just acknowledge the report and apply minor penalty
    // In a real implementation, this could log to a database for review
    const newScore = await this.socialCreditManager.updateScore(
      userId,
      guildId,
      CONFIG.SCORE_CHANGES.REPORT_MISTAKE_PENALTY,
      "–û—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–µ –≤ –∞–Ω–∞–ª–∏–∑–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞",
      interaction.user.username
    );

    // Set cooldown
    await this.effectManager.applyEffect(
      userId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.COOLDOWNS.REPORT_MISTAKE,
      undefined,
      { type: "report_cooldown" }
    );

    const embed = new EmbedBuilder()
      .setColor(0xffa500)
      .setTitle("üìù –û–¢–ß–Å–¢ –û–ë –û–®–ò–ë–ö–ï –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
        `–í–∞—à –æ—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–µ –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–∏–Ω—è—Ç –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é. ` +
        `–ü–∞—Ä—Ç–∏—è –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –∑–∞ –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–±–≤–∏–Ω–µ–Ω–∏—è—Ö.`
      )
      .addFields(
        { name: "‚ö†Ô∏è –®—Ç—Ä–∞—Ñ", value: `${CONFIG.SCORE_CHANGES.REPORT_MISTAKE_PENALTY}`, inline: true },
        { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à –æ—Ç—á—ë—Ç! üìã" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });

    // Log the report for manual review
    Logger.info(`Mistake reported by user ${userId} in guild ${guildId}`);
  }

  private async handleWorkForThePartyCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check cooldown
    const lastWork = this.effectManager.getEffectsByType(userId, "DAILY_CLAIM_RESET").find(
      e => e.metadata?.type === "work_cooldown"
    );
    if (lastWork) {
      const timeLeft = lastWork.expiresAt.getTime() - Date.now();
      if (timeLeft > 0) {
        const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
        await interaction.reply({
          content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${minutesLeft} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–±–æ—Ç–æ–π –¥–ª—è –ü–∞—Ä—Ç–∏–∏!`,
          ephemeral: true,
        });
        return;
      }
    }

    // Select random task
    const task = CONFIG.WORK_TASKS[Math.floor(Math.random() * CONFIG.WORK_TASKS.length)];

    const embed = new EmbedBuilder()
      .setColor(0xffa500)
      .setTitle("‚öíÔ∏è –†–ê–ë–û–¢–ê –î–õ–Ø –ü–ê–†–¢–ò–ò")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
        `–ü–∞—Ä—Ç–∏—è –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–π –ø–æ–º–æ—â–∏! –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n` +
        `**${task.question}**\n\n` +
        `‚è±Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥!`
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è —Ü–µ–Ω–∏—Ç –≤–∞—à—É –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });

    // Set cooldown
    await this.effectManager.applyEffect(
      userId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.COOLDOWNS.WORK_FOR_PARTY,
      undefined,
      { type: "work_cooldown" }
    );

    // Wait for response
    const filter = (m: any) => m.author.id === userId && m.content.trim() === task.answer;

    try {
      const channel = interaction.channel;
      if (!channel || !channel.isTextBased()) {
        throw new Error("Invalid channel");
      }

      const collector = (channel as any).createMessageCollector({
        filter,
        max: 1,
        time: 60000
      });

      const collected: any[] = await new Promise((resolve) => {
        collector.on('collect', (message: any) => {
          resolve([message]);
        });
        collector.on('end', (collected: any, reason: string) => {
          if (reason === 'time') {
            resolve([]);
          }
        });
      });

      if (collected && collected.length > 0) {
        // Success
        const newScore = await this.socialCreditManager.updateScore(
          userId,
          guildId,
          CONFIG.SCORE_CHANGES.WORK_FOR_PARTY_SUCCESS,
          "–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –ü–∞—Ä—Ç–∏–∏",
          interaction.user.username
        );

        const successEmbed = new EmbedBuilder()
          .setColor(0x00ff00)
          .setTitle("‚úÖ –†–ê–ë–û–¢–ê –í–´–ü–û–õ–ù–ï–ù–ê!")
          .setDescription(
            `**–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
            `–ü–∞—Ä—Ç–∏—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ –∑–∞ –≤–∞—à—É –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å.`
          )
          .addFields(
            { name: "üí∞ –ù–∞–≥—Ä–∞–¥–∞", value: `+${CONFIG.SCORE_CHANGES.WORK_FOR_PARTY_SUCCESS}`, inline: true },
            { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
          )
          .setFooter({ text: "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª—É–∂–∏—Ç—å –ü–∞—Ä—Ç–∏–∏! üá®üá≥" })
          .setTimestamp();

        await interaction.followUp({ embeds: [successEmbed] });
      } else {
        // No reward for failure, just inform
        const failureEmbed = new EmbedBuilder()
          .setColor(0xff0000)
          .setTitle("‚ùå –ó–ê–î–ê–ù–ò–ï –ù–ï –í–´–ü–û–õ–ù–ï–ù–û")
          .setDescription(
            `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
            `–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ü–∞—Ä—Ç–∏–∏ –≤ —Å—Ä–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.`
          )
          .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –∂–¥—ë—Ç –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤! ‚ö†Ô∏è" })
          .setTimestamp();

        await interaction.followUp({ embeds: [failureEmbed] });
      }
    } catch (error) {
      Logger.error(`Error in work-for-the-party: ${error}`);
    }
  }

  private calculateHarmonyLevel(averageScore: number): string {
    if (averageScore >= 800) return "üåü –í–´–°–®–ê–Ø –ì–ê–†–ú–û–ù–ò–Ø";
    if (averageScore >= 400) return "‚úÖ –í–´–°–û–ö–ê–Ø –ì–ê–†–ú–û–ù–ò–Ø";
    if (averageScore >= 100) return "üòê –£–ú–ï–†–ï–ù–ù–ê–Ø –ì–ê–†–ú–û–ù–ò–Ø";
    if (averageScore >= -100) return "‚ö™ –ù–ï–ô–¢–†–ê–õ–¨–ù–ê–Ø –ì–ê–†–ú–û–ù–ò–Ø";
    if (averageScore >= -300) return "‚ö†Ô∏è –ù–ò–ó–ö–ê–Ø –ì–ê–†–ú–û–ù–ò–Ø";
    return "üö® –°–û–¶–ò–ê–õ–¨–ù–´–ï –ë–ï–°–ü–û–†–Ø–î–ö–ò";
  }

  private async handleRateLimitStatusCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    if (!this.rateLimitManager) {
      await interaction.reply({
        content: "‚ùå Rate limit manager not available.",
        ephemeral: true,
      });
      return;
    }

    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    const status = this.rateLimitManager.getUserStatus(userId, guildId);
    const contextStats = this.messageContextManager?.getChannelStats() || {
      totalChannels: 0,
      totalMessages: 0,
    };

    const embed = new EmbedBuilder()
      .setColor(0x4169e1)
      .setTitle("‚è±Ô∏è –°–¢–ê–¢–£–° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –†–ï–ô–¢–ò–ù–ì–ê")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω:** ${interaction.user.username}\n*–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è*`
      )
      .addFields(
        {
          name: "üéØ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –†–µ–π—Ç–∏–Ω–≥",
          value: status.canReceivePositive
            ? "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
            : `‚ùå –ö—É–ª–¥–∞—É–Ω: ${Math.ceil(status.timeUntilPositive / 60000)} –º–∏–Ω`,
          inline: true,
        },
        {
          name: "üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤ –û–∫–Ω–µ",
          value: `${status.messagesInWindow}/10`,
          inline: true,
        },
        {
          name: "üìù –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö",
          value: `${status.bufferedMessages}`,
          inline: true,
        },
        {
          name: "‚è∞ –û–∫–Ω–æ –°–±—Ä–æ—Å–∏—Ç—Å—è",
          value: `${Math.ceil(status.windowTimeLeft / 1000)} —Å–µ–∫`,
          inline: true,
        },
        {
          name: "üåê –ö–æ–Ω—Ç–µ–∫—Å—Ç –ö–∞–Ω–∞–ª–æ–≤",
          value: `${contextStats.totalChannels}`,
          inline: true,
        },
        {
          name: "üí¨ –í—Å–µ–≥–æ –°–æ–æ–±—â–µ–Ω–∏–π",
          value: `${contextStats.totalMessages}`,
          inline: true,
        }
      )
      .setFooter({
        text: "–ü–∞—Ä—Ç–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ç–µ–º–ø! üëÅÔ∏è",
      })
      .setTimestamp();

    // Add warning if user is being rate limited
    if (!status.canReceivePositive || status.messagesInWindow >= 8) {
      embed.addFields({
        name: "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
        value:
          status.messagesInWindow >= 8
            ? "üö® –ë–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π! –°–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω—ã."
            : "‚è∞ –ö—É–ª–¥–∞—É–Ω –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω.",
        inline: false,
      });
    }

    await interaction.reply({ embeds: [embed], ephemeral: true });
  }

  private async handleListMonitoredChannelsCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    // Check if user has admin permissions
    if (
      !interaction.memberPermissions?.has(PermissionFlagsBits.Administrator)
    ) {
      await interaction.reply({
        content:
          "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–∏–π–Ω—ã–µ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã) –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!",
        ephemeral: true,
      });
      return;
    }

    const guildId = interaction.guildId!;

    try {
      const channelInfo =
        await this.databaseManager.getMonitoredChannelInfo(guildId);

      if (channelInfo.length === 0) {
        await interaction.reply({
          content:
            "üìä –í —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/set-monitor-channel` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.",
          ephemeral: true,
        });
        return;
      }

      const embed = new EmbedBuilder()
        .setColor(0x4169e1)
        .setTitle("üì∫ –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–ï –ö–ê–ù–ê–õ–´")
        .setDescription("*–ö–∞–Ω–∞–ª—ã –ø–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞*")
        .setTimestamp();

      let description = "";
      for (const info of channelInfo) {
        const channel = `<#${info.channelId}>`;
        const addedDate = info.addedAt.toLocaleDateString();
        description += `${channel}\n`;
        description += `‚îî –î–æ–±–∞–≤–ª–µ–Ω: ${addedDate} | <@${info.addedBy}>\n\n`;
      }

      embed.addFields({
        name: `üëÅÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${channelInfo.length}`,
        value: description,
        inline: false,
      });

      embed.setFooter({ text: "–ü–∞—Ä—Ç–∏—è –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –≤—Å–µ–º–∏! üëÅÔ∏è" });

      await interaction.reply({ embeds: [embed], ephemeral: true });
    } catch (error) {
      Logger.error("Error listing monitored channels:", error);
      await interaction.reply({
        content: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.",
        ephemeral: true,
      });
    }
  }

  private async handleRedeemMyselfCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check if user qualifies for redemption (score <= -200)
    const score = await this.socialCreditManager.getUserScore(userId, guildId);
    if (score > CONFIG.SCORE_THRESHOLDS.PENALTIES.MODERATE) {
      await interaction.reply({
        content: "‚ùå –í—ã –Ω–µ –Ω—É–∂–¥–∞–µ—Ç–µ—Å—å –≤ –∏—Å–∫—É–ø–ª–µ–Ω–∏–∏, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω! –í–∞—à —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ –ø–æ—Ä—è–¥–∫–µ.",
        ephemeral: true,
      });
      return;
    }

    // Check cooldown
    const lastRedeem = this.effectManager.getEffectsByType(userId, "DAILY_CLAIM_RESET").find(
      e => e.metadata?.type === "redeem_cooldown"
    );
    if (lastRedeem) {
      const timeLeft = lastRedeem.expiresAt.getTime() - Date.now();
      if (timeLeft > 0) {
        const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
        await interaction.reply({
          content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${minutesLeft} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏—Å–∫—É–ø–ª–µ–Ω–∏–µ–º, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω!`,
          ephemeral: true,
        });
        return;
      }
    }

    // Select random phrase
    const phrase = CONFIG.ANALYSIS.REDEEM_PHRASES[
      Math.floor(Math.random() * CONFIG.ANALYSIS.REDEEM_PHRASES.length)
    ];

    // Send the challenge
    const embed = new EmbedBuilder()
      .setColor(0xffa500)
      .setTitle("üôè –≠–î–ò–ö–¢ –ü–†–û–©–ï–ù–ò–Ø")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
        `–ü–∞—Ä—Ç–∏—è –¥–∞—ë—Ç –≤–∞–º —à–∞–Ω—Å –Ω–∞ –∏—Å–∫—É–ø–ª–µ–Ω–∏–µ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —ç—Ç—É —Ñ—Ä–∞–∑—É –≤ —á–∞—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥:\n\n` +
        `**"${phrase}"**\n\n` +
        `‚è±Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥!`
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –º–∏–ª–æ—Å–µ—Ä–¥–Ω–∞, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });

    // Set up cooldown
    await this.effectManager.applyEffect(
      userId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.COOLDOWNS.REDEEM_MYSELF,
      undefined,
      { type: "redeem_cooldown" }
    );

    // Wait for response
    const filter = (m: any) => m.author.id === userId && m.content.trim() === phrase;

    try {
      const channel = interaction.channel;
      if (!channel || !channel.isTextBased()) {
        throw new Error("Invalid channel");
      }

      const collector = (channel as any).createMessageCollector({
        filter,
        max: 1,
        time: 60000
      });

      const collected: any[] = await new Promise((resolve) => {
        collector.on('collect', (message: any) => {
          resolve([message]);
        });
        collector.on('end', (collected: any, reason: string) => {
          if (reason === 'time') {
            resolve([]);
          }
        });
      });

      if (collected && collected.length > 0) {
        // Success - grant forgiveness
        const newScore = await this.socialCreditManager.updateScore(
          userId,
          guildId,
          CONFIG.SCORE_CHANGES.REDEEM_SUCCESS,
          "–ò—Å–∫—É–ø–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≠–¥–∏–∫—Ç –ü—Ä–æ—â–µ–Ω–∏—è",
          interaction.user.username
        );

        const successEmbed = new EmbedBuilder()
          .setColor(0x00ff00)
          .setTitle("üéâ –ü–†–û–©–ï–ù–ò–ï –ü–û–õ–£–ß–ï–ù–û!")
          .setDescription(
            `**–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
            `–ü–∞—Ä—Ç–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∞—à–µ –∏—Å–∫—É–ø–ª–µ–Ω–∏–µ! –í–∞—à —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–≤—ã—à–µ–Ω.`
          )
          .addFields(
            { name: "üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –†–µ–π—Ç–∏–Ω–≥–∞", value: `+${CONFIG.SCORE_CHANGES.REDEEM_SUCCESS}`, inline: true },
            { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
          )
          .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –≤—Å–µ–≥–¥–∞ –¥–∞—ë—Ç –≤—Ç–æ—Ä–æ–π —à–∞–Ω—Å! üá®üá≥" })
          .setTimestamp();

        await interaction.followUp({ embeds: [successEmbed] });
      }
    } catch {
      // Failure - penalize
      const newScore = await this.socialCreditManager.updateScore(
        userId,
        guildId,
        CONFIG.SCORE_CHANGES.REDEEM_FAILURE,
        "–ü—Ä–æ–≤–∞–ª –≠–¥–∏–∫—Ç–∞ –ü—Ä–æ—â–µ–Ω–∏—è - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ä–≤–µ–Ω–∏–µ",
        interaction.user.username
      );

      const failureEmbed = new EmbedBuilder()
        .setColor(0xff0000)
        .setTitle("‚ùå –ü–†–û–©–ï–ù–ò–ï –û–¢–ö–ê–ó–ê–ù–û")
        .setDescription(
          `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
          `–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã—Ä–∞–∑–∏—Ç—å –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å –ü–∞—Ä—Ç–∏–∏. –í–∞—à —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–Ω–∏–∂–µ–Ω.`
        )
        .addFields(
          { name: "üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –†–µ–π—Ç–∏–Ω–≥–∞", value: `${CONFIG.SCORE_CHANGES.REDEEM_FAILURE}`, inline: true },
          { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
        )
        .setFooter({ text: "–ü–∞—Ä—Ç–∏—è —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∞ –≤–∞—à–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º! ‚ö†Ô∏è" })
        .setTimestamp();

      await interaction.followUp({ embeds: [failureEmbed] });
    }
  }

  private async handleEnforceHarmonyCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const enforcerId = interaction.user.id;
    const guildId = interaction.guildId || "dm";
    const targetUser = interaction.options.getUser("target", true);
    const reason = interaction.options.getString("reason", true);

    // Check if enforcer has high enough score
    const enforcerScore = await this.socialCreditManager.getUserScore(enforcerId, guildId);
    if (enforcerScore < CONFIG.SCORE_THRESHOLDS.PRIVILEGES.SUPREME_CITIZEN) {
      await interaction.reply({
        content: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥! –¢—Ä–µ–±—É–µ—Ç—Å—è ${CONFIG.SCORE_THRESHOLDS.PRIVILEGES.SUPREME_CITIZEN}+ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ú–∞–Ω–¥–∞—Ç–∞ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞.`,
        ephemeral: true,
      });
      return;
    }

    // Can't enforce on yourself
    if (targetUser.id === enforcerId) {
      await interaction.reply({
        content: "ü§î –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–≤—è–∑—ã–≤–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏—é —Å–∞–º–æ–º—É —Å–µ–±–µ, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω!",
        ephemeral: true,
      });
      return;
    }

    // Can't enforce on bots
    if (targetUser.bot) {
      await interaction.reply({
        content: "ü§ñ –ë–æ—Ç—ã —É–∂–µ –∏–¥–µ–∞–ª—å–Ω–æ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã!",
        ephemeral: true,
      });
      return;
    }

    // Check cooldown
    const lastEnforce = this.effectManager.getEffectsByType(enforcerId, "DAILY_CLAIM_RESET").find(
      e => e.metadata?.type === "enforce_cooldown"
    );
    if (lastEnforce) {
      const timeLeft = lastEnforce.expiresAt.getTime() - Date.now();
      if (timeLeft > 0) {
        const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
        await interaction.reply({
          content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${minutesLeft} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ú–∞–Ω–¥–∞—Ç–∞ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞!`,
          ephemeral: true,
        });
        return;
      }
    }

    // Apply enforcement
    const targetNewScore = await this.socialCreditManager.updateScore(
      targetUser.id,
      guildId,
      CONFIG.SCORE_CHANGES.ENFORCE_HARMONY_TARGET,
      `–ú–∞–Ω–¥–∞—Ç –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞: ${reason} (–æ—Ç ${interaction.user.username})`,
      targetUser.username
    );

    const enforcerNewScore = await this.socialCreditManager.updateScore(
      enforcerId,
      guildId,
      CONFIG.SCORE_CHANGES.ENFORCE_HARMONY_ENFORCER,
      `–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ú–∞–Ω–¥–∞—Ç–∞ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –Ω–∞ ${targetUser.username}`,
      interaction.user.username
    );

    // Set cooldown
    await this.effectManager.applyEffect(
      enforcerId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.COOLDOWNS.ENFORCE_HARMONY,
      undefined,
      { type: "enforce_cooldown" }
    );

    const embed = new EmbedBuilder()
      .setColor(0xffd700)
      .setTitle("‚öñÔ∏è –ú–ê–ù–î–ê–¢ –ì–†–ê–ñ–î–ê–ù–ò–ù–ê –ò–°–ü–û–õ–ù–ï–ù")
      .setDescription(
        `**–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** ${interaction.user.username}\n` +
        `**–ù–∞—Ä—É—à–∏—Ç–µ–ª—å:** ${targetUser.username}\n` +
        `**–ü—Ä–∏—á–∏–Ω–∞:** ${reason}`
      )
      .addFields(
        {
          name: "üë§ –ù–∞—Ä—É—à–∏—Ç–µ–ª—å",
          value: `üìâ ${CONFIG.SCORE_CHANGES.ENFORCE_HARMONY_TARGET} ‚Üí \`${targetNewScore}\``,
          inline: true,
        },
        {
          name: "üëë –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
          value: `üìà ${CONFIG.SCORE_CHANGES.ENFORCE_HARMONY_ENFORCER} ‚Üí \`${enforcerNewScore}\``,
          inline: true,
        }
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è —Ü–µ–Ω–∏—Ç –≤–∞—à—É –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  private async handleRemoveMonitorChannelCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    // Check if user has admin permissions
    if (
      !interaction.memberPermissions?.has(PermissionFlagsBits.Administrator)
    ) {
      await interaction.reply({
        content:
          "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–∏–π–Ω—ã–µ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã) –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º!",
        ephemeral: true,
      });
      return;
    }

    const channel = interaction.options.getChannel("channel");
    const guildId = interaction.guildId!;

    if (!channel || channel.type !== ChannelType.GuildText) {
      await interaction.reply({
        content: "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª.",
        ephemeral: true,
      });
      return;
    }

    try {
      const removed = await this.removeMonitoredChannelPersistent(
        guildId,
        channel.id
      );

      if (removed) {
        const embed = new EmbedBuilder()
          .setColor(0xff4500)
          .setTitle("üö´ –ú–û–ù–ò–¢–û–†–ò–ù–ì –û–¢–ö–õ–Æ–ß–Å–ù")
          .setDescription(
            `–ö–∞–Ω–∞–ª ${channel} –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.`
          )
          .addFields(
            { name: "üì∫ –ö–∞–Ω–∞–ª", value: `${channel}`, inline: true },
            { name: "üëÅÔ∏è –°—Ç–∞—Ç—É—Å", value: "–û–¢–ö–õ–Æ–ß–Å–ù", inline: true }
          )
          .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º." })
          .setTimestamp();

        await interaction.reply({ embeds: [embed] });
      } else {
        await interaction.reply({
          content: `‚ùå –ö–∞–Ω–∞–ª ${channel} –Ω–µ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.`,
          ephemeral: true,
        });
      }
    } catch (error) {
      Logger.error("Error removing monitored channel:", error);
      await interaction.reply({
        content: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
        ephemeral: true,
      });
    }
  }

  public isChannelMonitored(guildId: string, channelId: string): boolean {
    return this.monitoredChannels.get(guildId)?.has(channelId) || false;
  }

  public addMonitoredChannel(guildId: string, channelId: string): void {
    if (!this.monitoredChannels.has(guildId)) {
      this.monitoredChannels.set(guildId, new Set());
    }
    this.monitoredChannels.get(guildId)!.add(channelId);
  }

  public removeMonitoredChannel(guildId: string, channelId: string): void {
    this.monitoredChannels.get(guildId)?.delete(channelId);
  }

  private async addMonitoredChannelPersistent(
    guildId: string,
    channelId: string,
    channelName: string,
    addedBy: string
  ): Promise<void> {
    try {
      // Add to database
      await this.databaseManager.addMonitoredChannel(
        guildId,
        channelId,
        channelName,
        addedBy
      );

      // Add to memory
      this.addMonitoredChannel(guildId, channelId);

      Logger.info(
        `Added monitored channel ${channelId} (${channelName}) for guild ${guildId}`
      );
    } catch (error) {
      Logger.error("Failed to add monitored channel:", error);
      throw error;
    }
  }

  private async removeMonitoredChannelPersistent(
    guildId: string,
    channelId: string
  ): Promise<boolean> {
    try {
      // Remove from database
      const removed = await this.databaseManager.removeMonitoredChannel(
        guildId,
        channelId
      );

      if (removed) {
        // Remove from memory
        this.removeMonitoredChannel(guildId, channelId);
        Logger.info(
          `Removed monitored channel ${channelId} for guild ${guildId}`
        );
      }

      return removed;
    } catch (error) {
      Logger.error("Failed to remove monitored channel:", error);
      throw error;
    }
  }

  private getEffectDisplayName(effectType: string): string {
    const effectNames: Record<string, string> = {
      NICKNAME_CHANGE: "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ù–∏–∫–Ω–µ–π–º–∞",
      TIMEOUT: "–¢–∞–π–º-–∞—É—Ç",
      ROLE_GRANT: "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –†–æ–ª–∏",
      DAILY_CLAIM_RESET: "–ö—É–ª–¥–∞—É–Ω –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ë–æ–Ω—É—Å–∞",
      EVENT_MULTIPLIER: "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –°–æ–±—ã—Ç–∏—è",
    };
    return effectNames[effectType] || effectType;
  }
}
