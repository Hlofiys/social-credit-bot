import { 
    ChatInputCommandInteraction, 
    EmbedBuilder, 
    User, 
    PermissionFlagsBits,
    ChannelType 
} from 'discord.js';
import { SocialCreditManager } from '../managers/SocialCreditManager';
import { DatabaseManager } from '../managers/DatabaseManager';
import { MemeResponses } from '../utils/MemeResponses';

export class CommandHandler {
    private monitoredChannels: Map<string, Set<string>> = new Map(); // guildId -> Set of channelIds

    constructor(
        private socialCreditManager: SocialCreditManager,
        private databaseManager: DatabaseManager
    ) {}

    async handleInteraction(interaction: any): Promise<void> {
        if (!interaction.isChatInputCommand()) return;

        try {
            switch (interaction.commandName) {
                case 'social-credit':
                    await this.handleSocialCreditCommand(interaction);
                    break;
                case 'leaderboard':
                    await this.handleLeaderboardCommand(interaction);
                    break;
                case 'set-monitor-channel':
                    await this.handleSetMonitorChannelCommand(interaction);
                    break;
                case 'social-credit-history':
                    await this.handleHistoryCommand(interaction);
                    break;
                case 'social-credit-stats':
                    await this.handleStatsCommand(interaction);
                    break;
                default:
                    await interaction.reply({ 
                        content: 'ü§î Unknown command, citizen. The Party computers are confused.',
                        ephemeral: true 
                    });
            }
        } catch (error) {
            console.error('Error handling command:', error);
            await interaction.reply({ 
                content: 'üö® ERROR: The social credit system has malfunctioned! Please contact your local Party representative.',
                ephemeral: true 
            });
        }
    }

    private async handleSocialCreditCommand(interaction: ChatInputCommandInteraction): Promise<void> {
        const targetUser = interaction.options.getUser('user') || interaction.user;
        const guildId = interaction.guildId || 'dm';
        
        const score = await this.socialCreditManager.getUserScore(targetUser.id, guildId);
        const rankInfo = this.socialCreditManager.getScoreRank(score);
        
        const embed = new EmbedBuilder()
            .setColor(rankInfo.color)
            .setTitle(`${rankInfo.emoji} –û–¢–ß–Å–¢ –û –°–û–¶–ò–ê–õ–¨–ù–û–ú –†–ï–ô–¢–ò–ù–ì–ï ${rankInfo.emoji}`)
            .setDescription(`**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω:** ${targetUser.username}\n**–°—Ç–∞—Ç—É—Å:** ${rankInfo.rank}`)
            .addFields(
                { name: 'üíØ –¢–µ–∫—É—â–∏–π –†–µ–π—Ç–∏–Ω–≥', value: `${score}`, inline: true },
                { name: 'üèÖ –ó–≤–∞–Ω–∏–µ', value: rankInfo.rank, inline: true },
                { name: 'üìù –û—Ü–µ–Ω–∫–∞', value: rankInfo.description, inline: false }
            )
            .setThumbnail(targetUser.displayAvatarURL())
            .setFooter({ 
                text: `${MemeResponses.getRandomMemePhrase()}`,
                iconURL: 'https://upload.wikimedia.org/wikipedia/commons/f/fa/Flag_of_the_People%27s_Republic_of_China.svg'
            })
            .setTimestamp();

        // Add penalty/privilege info if applicable
        const penaltyLevel = this.socialCreditManager.getPenaltyLevel(score);
        const privilegeLevel = this.socialCreditManager.getPrivilegeLevel(score);

        if (penaltyLevel) {
            const penalty = MemeResponses.getPenalties(penaltyLevel);
            embed.addFields({ 
                name: '‚ö†Ô∏è Active Penalties', 
                value: penalty.memeText, 
                inline: false 
            });
        }

        if (privilegeLevel) {
            const privilege = MemeResponses.getPrivileges(privilegeLevel);
            embed.addFields({ 
                name: 'üéÅ Active Privileges', 
                value: privilege.memeText, 
                inline: false 
            });
        }

        await interaction.reply({ embeds: [embed] });
    }

    private async handleLeaderboardCommand(interaction: ChatInputCommandInteraction): Promise<void> {
        const scope = interaction.options.getString('scope') || 'server';
        const guildId = interaction.guildId || 'dm';
        
        let leaderboard;
        let title;
        
        if (scope === 'global') {
            leaderboard = await this.socialCreditManager.getGlobalLeaderboard(10);
            title = MemeResponses.getLeaderboardTitle(true);
        } else {
            leaderboard = await this.socialCreditManager.getServerLeaderboard(guildId, 10);
            title = MemeResponses.getLeaderboardTitle(false);
        }

        if (leaderboard.length === 0) {
            await interaction.reply({
                content: 'üìä –î–∞–Ω–Ω—ã–µ –æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ù–∞—á–Ω–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω!',
                ephemeral: true
            });
            return;
        }

        const embed = new EmbedBuilder()
            .setColor(0xFFD700)
            .setTitle('üèÜ –¢–ê–ë–õ–ò–¶–ê –°–û–¶–ò–ê–õ–¨–ù–û–ì–û –†–ï–ô–¢–ò–ù–ì–ê üèÜ')
            .setDescription(title)
            .setTimestamp();

        let description = '';
        for (let i = 0; i < leaderboard.length; i++) {
            const entry = leaderboard[i];
            const rank = i + 1;
            const medal = rank === 1 ? 'ü•á' : rank === 2 ? 'ü•à' : rank === 3 ? 'ü•â' : `${rank}.`;
            const scoreEmoji = MemeResponses.getScoreEmoji(entry.score);
            
            try {
                const user = await interaction.client.users.fetch(entry.userId);
                description += `${medal} **${user.username}** ${scoreEmoji} \`${entry.score}\`\n`;
            } catch (error) {
                description += `${medal} **Unknown User** ${scoreEmoji} \`${entry.score}\`\n`;
            }
        }

        embed.addFields({ 
            name: 'üë• –õ—É—á—à–∏–µ –ì—Ä–∞–∂–¥–∞–Ω–µ', 
            value: description || '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 
            inline: false 
        });

        embed.setFooter({ 
            text: `${MemeResponses.getRandomMemePhrase()}` 
        });

        await interaction.reply({ embeds: [embed] });
    }

    private async handleSetMonitorChannelCommand(interaction: ChatInputCommandInteraction): Promise<void> {
        // Check if user has admin permissions
        if (!interaction.memberPermissions?.has(PermissionFlagsBits.Administrator)) {
            await interaction.reply({
                content: 'üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–∏–π–Ω—ã–µ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã) –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!',
                ephemeral: true
            });
            return;
        }

        const channel = interaction.options.getChannel('channel');
        const guildId = interaction.guildId!;

        if (!channel || channel.type !== ChannelType.GuildText) {
            await interaction.reply({
                content: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.',
                ephemeral: true
            });
            return;
        }

        // Add channel to monitored channels
        this.addMonitoredChannel(guildId, channel.id);
        
        const embed = new EmbedBuilder()
            .setColor(0x00FF00)
            .setTitle('üéØ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ê–ö–¢–ò–í–ò–†–û–í–ê–ù')
            .setDescription(`–ö–∞–Ω–∞–ª ${channel} —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞!`)
            .addFields(
                { name: 'üì∫ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –ö–∞–Ω–∞–ª', value: `${channel}`, inline: true },
                { name: 'üëÅÔ∏è –°—Ç–∞—Ç—É—Å', value: '–ê–ö–¢–ò–í–ï–ù', inline: true }
            )
            .setFooter({ text: '–ü–∞—Ä—Ç–∏—è –≤–∏–¥–∏—Ç –≤—Å—ë! üëÅÔ∏è' })
            .setTimestamp();

        await interaction.reply({ embeds: [embed] });
    }

    private async handleHistoryCommand(interaction: ChatInputCommandInteraction): Promise<void> {
        const targetUser = interaction.options.getUser('user') || interaction.user;
        const guildId = interaction.guildId || 'dm';
        
        const history = await this.socialCreditManager.getUserHistory(targetUser.id, guildId, 10);
        
        if (history.length === 0) {
            await interaction.reply({
                content: `üìú –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è ${targetUser.username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ß–∏—Å—Ç—ã–π –ª–∏—Å—Ç, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω!`,
                ephemeral: true
            });
            return;
        }

        const embed = new EmbedBuilder()
            .setColor(0x4169E1)
            .setTitle('üìú –ò–°–¢–û–†–ò–Ø –°–û–¶–ò–ê–õ–¨–ù–û–ì–û –†–ï–ô–¢–ò–ù–ì–ê')
            .setDescription(`**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω:** ${targetUser.username}\n*–ù–µ–¥–∞–≤–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞*`)
            .setThumbnail(targetUser.displayAvatarURL())
            .setTimestamp();

        let historyText = '';
        for (const entry of history) {
            const date = entry.timestamp.toLocaleDateString();
            const time = entry.timestamp.toLocaleTimeString();
            const changeEmoji = entry.scoreChange > 0 ? 'üìà' : 'üìâ';
            const changeText = entry.scoreChange > 0 ? `+${entry.scoreChange}` : `${entry.scoreChange}`;
            
            historyText += `${changeEmoji} **${changeText}** - ${entry.reason}\n`;
            historyText += `*${date} at ${time}*\n\n`;
        }

        embed.addFields({ 
            name: 'üìä –ù–µ–¥–∞–≤–Ω—è—è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', 
            value: historyText || '–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', 
            inline: false 
        });

        embed.setFooter({ 
            text: `${MemeResponses.getRandomMemePhrase()}` 
        });

        await interaction.reply({ embeds: [embed] });
    }

    private async handleStatsCommand(interaction: ChatInputCommandInteraction): Promise<void> {
        const guildId = interaction.guildId || 'dm';
        
        const stats = await this.socialCreditManager.getServerStats(guildId);
        
        const embed = new EmbedBuilder()
            .setColor(0x9932CC)
            .setTitle('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–¶–ò–ê–õ–¨–ù–û–ì–û –†–ï–ô–¢–ò–ù–ì–ê –°–ï–†–í–ï–†–ê')
            .setDescription(MemeResponses.getStatsTitle())
            .addFields(
                { name: 'üë• –í—Å–µ–≥–æ –ì—Ä–∞–∂–¥–∞–Ω', value: `${stats.totalUsers}`, inline: true },
                { name: 'üìä –°—Ä–µ–¥–Ω–∏–π –†–µ–π—Ç–∏–Ω–≥', value: `${stats.averageScore}`, inline: true },
                { name: 'üèÜ –í—ã—Å—à–∏–π –†–µ–π—Ç–∏–Ω–≥', value: `${stats.highestScore}`, inline: true },
                { name: 'üíÄ –ù–∏–∑—à–∏–π –†–µ–π—Ç–∏–Ω–≥', value: `${stats.lowestScore}`, inline: true },
                { name: 'üìà –í—Å–µ–≥–æ –ò–∑–º–µ–Ω–µ–Ω–∏–π', value: `${stats.totalScoreChanges}`, inline: true },
                { name: 'üéØ –£—Ä–æ–≤–µ–Ω—å –°–æ—Ü–∏–∞–ª—å–Ω–æ–π –ì–∞—Ä–º–æ–Ω–∏–∏', value: this.calculateHarmonyLevel(stats.averageScore), inline: true }
            )
            .setFooter({ 
                text: `${MemeResponses.getRandomMemePhrase()}` 
            })
            .setTimestamp();

        await interaction.reply({ embeds: [embed] });
    }

    private calculateHarmonyLevel(averageScore: number): string {
        if (averageScore >= 1500) return 'üåü –í–´–°–®–ê–Ø –ì–ê–†–ú–û–ù–ò–Ø';
        if (averageScore >= 1000) return '‚úÖ –í–´–°–û–ö–ê–Ø –ì–ê–†–ú–û–ù–ò–Ø';
        if (averageScore >= 500) return 'üòê –£–ú–ï–†–ï–ù–ù–ê–Ø –ì–ê–†–ú–û–ù–ò–Ø';
        if (averageScore >= 0) return '‚ö†Ô∏è –ù–ò–ó–ö–ê–Ø –ì–ê–†–ú–û–ù–ò–Ø';
        return 'üö® –°–û–¶–ò–ê–õ–¨–ù–´–ï –ë–ï–°–ü–û–†–Ø–î–ö–ò';
    }

    public isChannelMonitored(guildId: string, channelId: string): boolean {
        return this.monitoredChannels.get(guildId)?.has(channelId) || false;
    }

    public addMonitoredChannel(guildId: string, channelId: string): void {
        if (!this.monitoredChannels.has(guildId)) {
            this.monitoredChannels.set(guildId, new Set());
        }
        this.monitoredChannels.get(guildId)!.add(channelId);
    }

    public removeMonitoredChannel(guildId: string, channelId: string): void {
        this.monitoredChannels.get(guildId)?.delete(channelId);
    }
}