import {
  ChatInputCommandInteraction,
  EmbedBuilder,
  MessageFlags,
  ActionRowBuilder,
  ComponentType,
  StringSelectMenuBuilder,
  StringSelectMenuOptionBuilder,
  StringSelectMenuInteraction,
} from "discord.js";
import { BaseCommandHandler } from "./BaseCommandHandler.js";
import { CONFIG } from "../config.js";
import { Logger } from "../utils/Logger.js";

interface PartyFavorOption {
  id: string;
  name: string;
  description: string;
  duration: number; // in milliseconds
  effect: string;
}

export class PrivilegeCommands extends BaseCommandHandler {
  private readonly partyFavorOptions: PartyFavorOption[] = [
    {
      id: "GLORIOUS_PRODUCTION",
      name: "üè≠ –°–ª–∞–≤–Ω–æ–µ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
      description: "–í—Å–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ 10%",
      duration: 15 * 60 * 1000, // 15 minutes
      effect: "positive_boost",
    },
    {
      id: "HARMONY_FESTIVAL",
      name: "üïäÔ∏è –§–µ—Å—Ç–∏–≤–∞–ª—å –ì–∞—Ä–º–æ–Ω–∏–∏",
      description: "–ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –ø–æ—Ç–µ—Ä—è—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥",
      duration: 15 * 60 * 1000, // 15 minutes
      effect: "no_negative",
    },
    {
      id: "LOYALTY_TEST",
      name: "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –õ–æ—è–ª—å–Ω–æ—Å—Ç–∏",
      description: "–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É–¥–≤–∞–∏–≤–∞—é—Ç—Å—è",
      duration: 15 * 60 * 1000, // 15 minutes
      effect: "double_changes",
    },
  ];

  async handleInteraction(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    try {
      switch (interaction.commandName) {
        // Basic privilege commands
        case "enforce-harmony":
          await this.handleEnforceHarmonyCommand(interaction);
          break;
        case "claim-daily":
          await this.handleClaimDailyCommand(interaction);
          break;
        case "spread-propaganda":
          await this.handleSpreadPropagandaCommand(interaction);
          break;
        // Enhanced privilege commands
        case "propaganda-broadcast":
          await this.handlePropagandaBroadcastCommand(interaction);
          break;
        case "party-favor":
          await this.handlePartyFavorCommand(interaction);
          break;
        case "investigate":
          await this.handleInvestigateCommand(interaction);
          break;
        default:
          throw new Error(
            `Unknown privilege command: ${interaction.commandName}`
          );
      }
    } catch (error) {
      Logger.error(
        `Error in privilege command ${interaction.commandName}:`,
        error
      );

      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({
          content:
            "üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
          flags: MessageFlags.Ephemeral,
        });
      }
    }
  }

  // Basic Privilege Commands

  private async handleEnforceHarmonyCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const enforcerId = interaction.user.id;
    const guildId = interaction.guildId || "dm";
    const targetUser = interaction.options.getUser("target", true);
    const reason = interaction.options.getString("reason", true);

    // Check if enforcer has high enough score
    const enforcerScore = await this.socialCreditManager.getUserScore(
      enforcerId,
      guildId
    );
    if (enforcerScore < CONFIG.SCORE_THRESHOLDS.PRIVILEGES.SUPREME_CITIZEN) {
      await interaction.reply({
        content: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥! –¢—Ä–µ–±—É–µ—Ç—Å—è ${CONFIG.SCORE_THRESHOLDS.PRIVILEGES.SUPREME_CITIZEN}+ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ú–∞–Ω–¥–∞—Ç–∞ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞.`,
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Can't enforce on yourself
    if (targetUser.id === enforcerId) {
      await interaction.reply({
        content: "ü§î –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–≤—è–∑—ã–≤–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏—é —Å–∞–º–æ–º—É —Å–µ–±–µ, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω!",
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Can't enforce on bots
    if (targetUser.bot) {
      await interaction.reply({
        content: "ü§ñ –ë–æ—Ç—ã —É–∂–µ –∏–¥–µ–∞–ª—å–Ω–æ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã!",
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Check cooldown
    const cooldownCheck = this.effectManager.isOnCooldown(
      enforcerId,
      "DAILY_CLAIM_RESET"
    );
    if (cooldownCheck.onCooldown && cooldownCheck.timeLeft) {
      const hoursLeft = Math.ceil(cooldownCheck.timeLeft / (60 * 60 * 1000));
      await interaction.reply({
        content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${hoursLeft} —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ú–∞–Ω–¥–∞—Ç–∞ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞!`,
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Apply enforcement
    const targetNewScore = await this.socialCreditManager.updateScore(
      targetUser.id,
      guildId,
      CONFIG.SCORE_CHANGES.ENFORCE_HARMONY_TARGET,
      `–ú–∞–Ω–¥–∞—Ç –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞: ${reason} (–æ—Ç ${interaction.user.username})`,
      targetUser.username
    );

    const enforcerNewScore = await this.socialCreditManager.updateScore(
      enforcerId,
      guildId,
      CONFIG.SCORE_CHANGES.ENFORCE_HARMONY_ENFORCER,
      `–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ú–∞–Ω–¥–∞—Ç–∞ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –Ω–∞ ${targetUser.username}`,
      interaction.user.username
    );

    // Set cooldown
    await this.effectManager.applyEffect(
      enforcerId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.COOLDOWNS.ENFORCE_HARMONY
    );

    const embed = new EmbedBuilder()
      .setColor(0xffd700)
      .setTitle("‚öñÔ∏è –ú–ê–ù–î–ê–¢ –ì–†–ê–ñ–î–ê–ù–ò–ù–ê –ò–°–ü–û–õ–ù–ï–ù")
      .setDescription(
        `**–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** ${interaction.user.username}\n` +
          `**–ù–∞—Ä—É—à–∏—Ç–µ–ª—å:** ${targetUser.username}\n` +
          `**–ü—Ä–∏—á–∏–Ω–∞:** ${reason}`
      )
      .addFields(
        {
          name: "üë§ –ù–∞—Ä—É—à–∏—Ç–µ–ª—å",
          value: `üìâ ${CONFIG.SCORE_CHANGES.ENFORCE_HARMONY_TARGET} ‚Üí \`${targetNewScore}\``,
          inline: true,
        },
        {
          name: "üëë –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
          value: `üìà ${CONFIG.SCORE_CHANGES.ENFORCE_HARMONY_ENFORCER} ‚Üí \`${enforcerNewScore}\``,
          inline: true,
        }
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è —Ü–µ–Ω–∏—Ç –≤–∞—à—É –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  private async handleClaimDailyCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check cooldown
    const cooldownCheck = this.effectManager.isOnCooldown(
      userId,
      "DAILY_CLAIM_RESET"
    );
    if (cooldownCheck.onCooldown && cooldownCheck.timeLeft) {
      const hoursLeft = Math.ceil(cooldownCheck.timeLeft / (60 * 60 * 1000));
      await interaction.reply({
        content: `‚è∞ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è! –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${hoursLeft} —á–∞—Å–æ–≤.`,
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Get user's rank to determine bonus amount
    const userScore = await this.socialCreditManager.getUserScore(
      userId,
      guildId
    );
    const rankInfo = this.socialCreditManager.getScoreRank(userScore);

    let bonusAmount = 0;
    if (userScore >= CONFIG.SCORE_THRESHOLDS.PRIVILEGES.SUPREME_CITIZEN) {
      bonusAmount = CONFIG.DAILY_CLAIMS.SUPREME_CITIZEN;
    } else if (userScore >= CONFIG.SCORE_THRESHOLDS.PRIVILEGES.MODEL_CITIZEN) {
      bonusAmount = CONFIG.DAILY_CLAIMS.MODEL_CITIZEN;
    } else if (userScore >= CONFIG.SCORE_THRESHOLDS.PRIVILEGES.GOOD_CITIZEN) {
      bonusAmount = CONFIG.DAILY_CLAIMS.GOOD_CITIZEN;
    } else {
      await interaction.reply({
        content:
          "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞! –ü–æ–≤—ã—Å—å—Ç–µ —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥.",
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Apply the bonus
    const newScore = await this.socialCreditManager.updateScore(
      userId,
      guildId,
      bonusAmount,
      `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ü–∞—Ä—Ç–∏–∏ (${rankInfo.rank})`,
      interaction.user.username
    );

    // Set claim cooldown
    await this.effectManager.applyEffect(
      userId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.EFFECT_DURATIONS.DAILY_CLAIM_RESET
    );

    const embed = new EmbedBuilder()
      .setColor(0x00ff00)
      .setTitle("üéÅ –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° –ü–ê–†–¢–ò–ò")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
          `–ü–∞—Ä—Ç–∏—è –±–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω–∞ –∫ –≤–∞–º —Å–µ–≥–æ–¥–Ω—è! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ –≤–∞—à—É –ª–æ—è–ª—å–Ω–æ—Å—Ç—å.`
      )
      .addFields(
        { name: "üèÖ –ó–≤–∞–Ω–∏–µ", value: rankInfo.rank, inline: true },
        { name: "üí∞ –ë–æ–Ω—É—Å", value: `+${bonusAmount}`, inline: true },
        { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ —Å–≤–æ–∏—Ö –ª—É—á—à–∏—Ö –≥—Ä–∞–∂–¥–∞–Ω–∞—Ö! üá®üá≥" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  private async handleSpreadPropagandaCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check if user has high enough score
    const userScore = await this.socialCreditManager.getUserScore(
      userId,
      guildId
    );
    if (userScore < CONFIG.SCORE_THRESHOLDS.PRIVILEGES.MODEL_CITIZEN) {
      await interaction.reply({
        content: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥! –¢—Ä–µ–±—É–µ—Ç—Å—è ${CONFIG.SCORE_THRESHOLDS.PRIVILEGES.MODEL_CITIZEN}+ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã.`,
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Check cooldown
    const cooldownCheck = this.effectManager.isOnCooldown(
      userId,
      "DAILY_CLAIM_RESET"
    );
    if (cooldownCheck.onCooldown && cooldownCheck.timeLeft) {
      const hoursLeft = Math.ceil(cooldownCheck.timeLeft / (60 * 60 * 1000));
      await interaction.reply({
        content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${hoursLeft} —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã!`,
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Select random propaganda image
    const imageUrl =
      CONFIG.PROPAGANDA_IMAGES[
        Math.floor(Math.random() * CONFIG.PROPAGANDA_IMAGES.length)
      ];

    // Create embed with propaganda
    const embed = new EmbedBuilder()
      .setColor(0xffd700)
      .setTitle("üá®üá≥ –°–õ–ê–í–ê –ü–ê–†–¢–ò–ò! üá®üá≥")
      .setDescription(
        `**${interaction.user.username}** –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–∞–º –æ –≤–µ–ª–∏—á–∏–∏ –ü–∞—Ä—Ç–∏–∏!\n\n` +
          `*"–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—Å—Ç–≤–æ –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ü–∞—Ä—Ç–∏–∏!"*`
      )
      .setImage(imageUrl)
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤–∞! ‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩ‰∏áÂ≤Å!" })
      .setTimestamp();

    // Send to current channel
    await interaction.reply({ embeds: [embed] });

    // Apply bonus
    const newScore = await this.socialCreditManager.updateScore(
      userId,
      guildId,
      CONFIG.SCORE_CHANGES.SPREAD_PROPAGANDA_BONUS,
      "–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–∞–≤–Ω–æ–π –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã –ü–∞—Ä—Ç–∏–∏",
      interaction.user.username
    );

    // Set cooldown
    await this.effectManager.applyEffect(
      userId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.COOLDOWNS.SPREAD_PROPAGANDA
    );

    // Send confirmation
    const confirmEmbed = new EmbedBuilder()
      .setColor(0x00ff00)
      .setTitle("üì¢ –ü–†–û–ü–ê–ì–ê–ù–î–ê –†–ê–°–ü–†–û–°–¢–†–ê–ù–ï–ù–ê!")
      .setDescription(
        `**–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
          `–ü–∞—Ä—Ç–∏—è —Ü–µ–Ω–∏—Ç –≤–∞—à—É –ø–æ–º–æ—â—å –≤ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–∏–Ω—ã.`
      )
      .addFields(
        {
          name: "üí∞ –ë–æ–Ω—É—Å",
          value: `+${CONFIG.SCORE_CHANGES.SPREAD_PROPAGANDA_BONUS}`,
          inline: true,
        },
        { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
      )
      .setFooter({ text: "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª—É–∂–∏—Ç—å –ü–∞—Ä—Ç–∏–∏! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.followUp({
      embeds: [confirmEmbed],
      flags: MessageFlags.Ephemeral,
    });
  }

  // Enhanced Privilege Commands

  private async handlePropagandaBroadcastCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";
    const message = interaction.options.getString("message", true);

    // Check if user qualifies (score > 1000)
    const score = await this.socialCreditManager.getUserScore(userId, guildId);
    if (score <= CONFIG.SCORE_THRESHOLDS.PRIVILEGES.MODEL_CITIZEN) {
      await interaction.reply({
        content:
          "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∏–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã! –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –û–±—Ä–∞–∑—Ü–æ–≤–æ–≥–æ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ (1000+ —Ä–µ–π—Ç–∏–Ω–≥–∞).",
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Check cooldown
    const cooldownCheck = this.effectManager.isOnCooldown(
      userId,
      "PROPAGANDA_BROADCAST_COOLDOWN"
    );
    if (cooldownCheck.onCooldown && cooldownCheck.timeLeft) {
      const hoursLeft = Math.ceil(cooldownCheck.timeLeft / (60 * 60 * 1000));
      await interaction.reply({
        content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${hoursLeft} —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–µ–π –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã!`,
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Defer reply since moderation might take time
    await interaction.deferReply();

    try {
      // Moderate and enhance the message
      const enhancedMessage = await this.moderateAndEnhancePropaganda(message);

      // Create broadcast embed
      const embed = new EmbedBuilder()
        .setColor(0xdc143c)
        .setTitle("üì¢ –û–§–ò–¶–ò–ê–õ–¨–ù–ê–Ø –¢–†–ê–ù–°–õ–Ø–¶–ò–Ø –ü–ê–†–¢–ò–ò üì¢")
        .setDescription(
          `**–í–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º!**\n\n` +
            `–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω **${interaction.user.username}** –ø–µ—Ä–µ–¥–∞–µ—Ç –≤–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ü–∞—Ä—Ç–∏–∏:\n\n` +
            `*${enhancedMessage}*`
        )
        .setFooter({
          text: `–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º –ü—Ä–æ–ø–∞–≥–∞–Ω–¥—ã | ${new Date().toLocaleDateString("ru-RU")}`,
        })
        .setTimestamp();

      await interaction.editReply({ embeds: [embed] });

      // Apply score bonus
      const newScore = await this.socialCreditManager.updateScore(
        userId,
        guildId,
        CONFIG.SCORE_CHANGES.PROPAGANDA_BROADCAST_BONUS || 50,
        "–£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã –ü–∞—Ä—Ç–∏–∏",
        interaction.user.username
      );

      // Set cooldown
      await this.effectManager.applyEffect(
        userId,
        guildId,
        "PROPAGANDA_BROADCAST_COOLDOWN",
        CONFIG.COOLDOWNS.PROPAGANDA_BROADCAST
      );

      // Send confirmation to user
      const confirmEmbed = new EmbedBuilder()
        .setColor(0x00ff00)
        .setTitle("‚úÖ –¢–†–ê–ù–°–õ–Ø–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
        .setDescription(
          `–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º.\n\n` +
            `**–ù–∞–≥—Ä–∞–¥–∞:** +${CONFIG.SCORE_CHANGES.PROPAGANDA_BROADCAST_BONUS || 50}\n` +
            `**–ù–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥:** ${newScore}`
        )
        .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –≥–æ—Ä–¥–∏—Ç—Å—è –≤–∞—à–µ–π –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å—é! üá®üá≥" });

      await interaction.followUp({
        embeds: [confirmEmbed],
        flags: MessageFlags.Ephemeral,
      });
    } catch (error) {
      Logger.error(`Error in propaganda broadcast: ${error}`);
      await interaction.editReply({
        content:
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.",
      });
    }
  }

  private async handlePartyFavorCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check if user qualifies (Supreme Citizen)
    const score = await this.socialCreditManager.getUserScore(userId, guildId);
    if (score < CONFIG.SCORE_THRESHOLDS.PRIVILEGES.SUPREME_CITIZEN) {
      await interaction.reply({
        content: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∏–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥! –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –í—ã—Å—à–µ–≥–æ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ (${CONFIG.SCORE_THRESHOLDS.PRIVILEGES.SUPREME_CITIZEN}+ —Ä–µ–π—Ç–∏–Ω–≥–∞) –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ü–∞—Ä—Ç–∏–π–Ω—ã—Ö –ü—Ä–∏–≤–∏–ª–µ–≥–∏–π.`,
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Check cooldown
    const cooldownCheck = this.effectManager.isOnCooldown(
      userId,
      "PARTY_FAVOR_COOLDOWN"
    );
    if (cooldownCheck.onCooldown && cooldownCheck.timeLeft) {
      const hoursLeft = Math.ceil(cooldownCheck.timeLeft / (60 * 60 * 1000));
      await interaction.reply({
        content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${hoursLeft} —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ü–∞—Ä—Ç–∏–π–Ω—ã—Ö –ü—Ä–∏–≤–∏–ª–µ–≥–∏–π!`,
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Create selection menu
    const selectMenu = new StringSelectMenuBuilder()
      .setCustomId("party_favor_select")
      .setPlaceholder("–í—ã–±–µ—Ä–∏—Ç–µ –ü–∞—Ä—Ç–∏–π–Ω—É—é –ü—Ä–∏–≤–∏–ª–µ–≥–∏—é...")
      .addOptions(
        this.partyFavorOptions.map((option) =>
          new StringSelectMenuOptionBuilder()
            .setLabel(option.name)
            .setDescription(option.description)
            .setValue(option.id)
        )
      );

    const row = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(
      selectMenu
    );

    const embed = new EmbedBuilder()
      .setColor(0xffd700)
      .setTitle("üèõÔ∏è –ü–ê–†–¢–ò–ô–ù–´–ï –ü–†–ò–í–ò–õ–ï–ì–ò–ò")
      .setDescription(
        `**–í—ã—Å—à–∏–π –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
          `–ü–∞—Ä—Ç–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –¥–ª—è –≤—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:\n\n` +
          `‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 15 –º–∏–Ω—É—Ç\n` +
          `üåê **–≠—Ñ—Ñ–µ–∫—Ç:** –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö –≥—Ä–∞–∂–¥–∞–Ω —Å–µ—Ä–≤–µ—Ä–∞`
      )
      .setFooter({ text: "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá" })
      .setTimestamp();

    const response = await interaction.reply({
      embeds: [embed],
      components: [row],
      flags: MessageFlags.Ephemeral,
    });

    try {
      const confirmation = await response.awaitMessageComponent({
        componentType: ComponentType.StringSelect,
        time: 60000,
        filter: (i) => i.user.id === userId,
      });

      const selectedOption = this.partyFavorOptions.find(
        (option) => option.id === confirmation.values[0]
      );

      if (!selectedOption) {
        await confirmation.update({
          content: "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏.",
          components: [],
          embeds: [],
        });
        return;
      }

      await this.applyPartyFavor(confirmation, selectedOption, guildId);
    } catch (error) {
      Logger.error(`Error in party favor selection: ${error}`);
      await interaction.editReply({
        content: "‚è∞ –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞.",
        components: [],
        embeds: [],
      });
    }
  }

  private async handleInvestigateCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const investigatorId = interaction.user.id;
    const guildId = interaction.guildId || "dm";
    const targetUser = interaction.options.getUser("target", true);

    // Check if investigator qualifies (Model Citizen)
    const investigatorScore = await this.socialCreditManager.getUserScore(
      investigatorId,
      guildId
    );
    if (investigatorScore < CONFIG.SCORE_THRESHOLDS.PRIVILEGES.MODEL_CITIZEN) {
      await interaction.reply({
        content: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∏–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π! –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –û–±—Ä–∞–∑—Ü–æ–≤–æ–≥–æ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ (${CONFIG.SCORE_THRESHOLDS.PRIVILEGES.MODEL_CITIZEN}+ —Ä–µ–π—Ç–∏–Ω–≥–∞).`,
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Can't investigate yourself
    if (targetUser.id === investigatorId) {
      await interaction.reply({
        content: "ü§î –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω!",
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Can't investigate bots
    if (targetUser.bot) {
      await interaction.reply({
        content:
          "ü§ñ –ë–æ—Ç—ã –Ω–µ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ - –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –ª–æ—è–ª—å–Ω—ã –ü–∞—Ä—Ç–∏–∏!",
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Check cooldown
    const cooldownCheck = this.effectManager.isOnCooldown(
      investigatorId,
      "INVESTIGATION_COOLDOWN"
    );
    if (cooldownCheck.onCooldown && cooldownCheck.timeLeft) {
      const hoursLeft = Math.ceil(cooldownCheck.timeLeft / (60 * 60 * 1000));
      await interaction.reply({
        content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${hoursLeft} —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º!`,
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    await interaction.deferReply({ flags: MessageFlags.Ephemeral });

    try {
      // Get target's info
      const targetScore = await this.socialCreditManager.getUserScore(
        targetUser.id,
        guildId
      );
      const targetRank = this.socialCreditManager.getScoreRank(targetScore);
      const targetStatus = this.getUserStatusByScore(targetScore);

      // Get recent history (fallback implementation)
      const recentHistory: Array<{ reason: string; change: number }> = [];

      // Get active effects
      const activeEffects = this.effectManager.getActiveEffects(targetUser.id);

      // Create investigation report
      const embed = new EmbedBuilder()
        .setColor(targetScore >= 0 ? 0x00ff00 : 0xff0000)
        .setTitle("üîç –î–û–°–¨–ï –ì–†–ê–ñ–î–ê–ù–ò–ù–ê")
        .setDescription(
          `**–û–±—ä–µ–∫—Ç:** ${targetUser.username}\n` +
            `**–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å:** ${interaction.user.username}\n` +
            `**–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:** –ó–ê–í–ï–†–®–ï–ù–û`
        )
        .addFields(
          {
            name: "üìä –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –†–µ–π—Ç–∏–Ω–≥",
            value: `**${targetScore}** (${targetRank.rank})`,
            inline: true,
          },
          {
            name: "üè∑Ô∏è –°—Ç–∞—Ç—É—Å –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞",
            value: targetStatus,
            inline: true,
          },
          {
            name: "‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –≠—Ñ—Ñ–µ–∫—Ç—ã",
            value:
              activeEffects.length > 0
                ? activeEffects.map((e) => `‚Ä¢ ${e.effectType}`).join("\n")
                : "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤",
            inline: false,
          }
        )
        .setFooter({
          text: `–î–æ—Å—å–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏`,
        })
        .setTimestamp();

      if (recentHistory && recentHistory.length > 0) {
        const historyText = recentHistory
          .map(
            (h: { reason: string; change: number }) =>
              `‚Ä¢ ${h.reason} (${h.change > 0 ? "+" : ""}${h.change})`
          )
          .join("\n");

        embed.addFields({
          name: "üìù –ù–µ–¥–∞–≤–Ω—è—è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
          value: historyText || "–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
          inline: false,
        });
      }

      await interaction.editReply({ embeds: [embed] });

      // Apply investigation cost
      await this.socialCreditManager.updateScore(
        investigatorId,
        guildId,
        CONFIG.SCORE_CHANGES.INVESTIGATION_COST,
        `–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ ${targetUser.username}`,
        interaction.user.username
      );

      // Set cooldown
      await this.effectManager.applyEffect(
        investigatorId,
        guildId,
        "INVESTIGATION_COOLDOWN",
        CONFIG.COOLDOWNS.INVESTIGATION
      );
    } catch (error) {
      Logger.error(`Error in investigation: ${error}`);
      await interaction.editReply({
        content:
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
      });
    }
  }

  // Helper methods

  private async moderateAndEnhancePropaganda(message: string): Promise<string> {
    try {
      const prompt = `
        –¢—ã - —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—Å–∫–æ–≥–æ –æ—Ç–¥–µ–ª–∞ –ö–æ–º–º—É–Ω–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –ø–∞—Ä—Ç–∏–∏ –ö–∏—Ç–∞—è.
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —É–ª—É—á—à–∏—Ç—å –∏ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏.

        –ü—Ä–∞–≤–∏–ª–∞:
        1. –£–±—Ä–∞—Ç—å –ª—é–±—É—é –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â—É—é –ª–µ–∫—Å–∏–∫—É –∏–ª–∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è
        2. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–º–º—É–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ø–∞—Ä—Ç–∏–π–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        3. –°–¥–µ–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª–µ–µ —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º
        4. –ú–∞–∫—Å–∏–º—É–º 200 —Å–ª–æ–≤
        5. –û—Ç–≤–µ—Ç–∏—Ç—å –¢–û–õ–¨–ö–û –∏—Ç–æ–≥–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π

        –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}"
      `;

      const completion = await this.openai.chat.completions.create({
        model: CONFIG.LLM.STANDARD_MODEL,
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7,
        max_tokens: 300,
      });

      const enhancedMessage = completion.choices?.[0]?.message?.content;
      return enhancedMessage || message;
    } catch (error) {
      Logger.error(`Error enhancing propaganda: ${error}`);
      return message; // Fallback to original message
    }
  }

  private async applyPartyFavor(
    interaction: ChatInputCommandInteraction | StringSelectMenuInteraction,
    option: PartyFavorOption,
    guildId: string
  ): Promise<void> {
    try {
      // Apply the server-wide effect
      await this.effectManager.applyEffect(
        "SERVER",
        guildId,
        "EVENT_MULTIPLIER",
        option.duration,
        undefined,
        {
          type: "party_favor",
          activatedBy: interaction.user.id,
          activatedByName: interaction.user.username,
          favorType: option.effect,
        }
      );

      // Deduct score cost
      const cost = CONFIG.SCORE_CHANGES.PARTY_FAVOR_COST;
      const newScore = await this.socialCreditManager.updateScore(
        interaction.user.id,
        guildId,
        -cost,
        `–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ü–∞—Ä—Ç–∏–π–Ω–æ–π –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏: ${option.name}`,
        interaction.user.username
      );

      // Set cooldown
      await this.effectManager.applyEffect(
        interaction.user.id,
        guildId,
        "PARTY_FAVOR_COOLDOWN",
        CONFIG.COOLDOWNS.PARTY_FAVOR
      );

      // Update the interaction with success message
      const successEmbed = new EmbedBuilder()
        .setColor(0x00ff00)
        .setTitle("‚úÖ –ü–ê–†–¢–ò–ô–ù–ê–Ø –ü–†–ò–í–ò–õ–ï–ì–ò–Ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!")
        .setDescription(
          `**${option.name}** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n` +
            `**–≠—Ñ—Ñ–µ–∫—Ç:** ${option.description}\n` +
            `**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 15 –º–∏–Ω—É—Ç\n` +
            `**–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${cost} —Ä–µ–π—Ç–∏–Ω–≥–∞\n` +
            `**–ù–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥:** ${newScore}`
        )
        .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –∑–∞ –≤–∞—à–µ —Å–ª—É–∂–µ–Ω–∏–µ! üèõÔ∏è" })
        .setTimestamp();

      if ("update" in interaction) {
        await interaction.update({
          embeds: [successEmbed],
          components: [],
        });
      } else {
        await interaction.editReply({
          embeds: [successEmbed],
          components: [],
        });
      }

      // Announce to the server (if in a guild)
      if (interaction.guild && interaction.channel) {
        const announceEmbed = new EmbedBuilder()
          .setColor(0xffd700)
          .setTitle("üèõÔ∏è –ü–ê–†–¢–ò–ô–ù–ê–Ø –ü–†–ò–í–ò–õ–ï–ì–ò–Ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!")
          .setDescription(
            `**–í—ã—Å—à–∏–π –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –¥–ª—è –≤—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:\n\n` +
              `**${option.name}**\n` +
              `*${option.description}*\n\n` +
              `‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 15 –º–∏–Ω—É—Ç`
          )
          .setFooter({ text: "–í—Å–µ –≥—Ä–∞–∂–¥–∞–Ω–µ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞! üá®üá≥" })
          .setTimestamp();

        if (
          interaction.guild &&
          interaction.channel &&
          !interaction.ephemeral
        ) {
          await interaction.followUp({ embeds: [announceEmbed] });
        }
      }
    } catch (error) {
      Logger.error(`Error applying party favor: ${error}`);
      if ("update" in interaction) {
        await interaction.update({
          content: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏.",
          components: [],
          embeds: [],
        });
      } else {
        await interaction.editReply({
          content: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏.",
          components: [],
          embeds: [],
        });
      }
    }
  }

  private getUserStatusByScore(score: number): string {
    if (score >= CONFIG.SCORE_THRESHOLDS.PRIVILEGES.SUPREME_CITIZEN) {
      return "üèõÔ∏è –í—ã—Å—à–∏–π –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω";
    } else if (score >= CONFIG.SCORE_THRESHOLDS.PRIVILEGES.MODEL_CITIZEN) {
      return "üèÖ –û–±—Ä–∞–∑—Ü–æ–≤—ã–π –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω";
    } else if (score >= CONFIG.SCORE_THRESHOLDS.PRIVILEGES.GOOD_CITIZEN) {
      return "‚úÖ –î–æ–±—Ä–æ–ø–æ—Ä—è–¥–æ—á–Ω—ã–π –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω";
    } else if (score >= CONFIG.SCORE_THRESHOLDS.PENALTIES.MILD) {
      return "‚ö†Ô∏è –û–±—ã—á–Ω—ã–π –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω";
    } else if (score >= CONFIG.SCORE_THRESHOLDS.PENALTIES.MODERATE) {
      return "‚ùå –°–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≠–ª–µ–º–µ–Ω—Ç";
    } else if (score >= CONFIG.SCORE_THRESHOLDS.PENALTIES.SEVERE) {
      return "üö´ –í—Ä–∞–≥ –ù–∞—Ä–æ–¥–∞";
    } else {
      return "üíÄ –ü—Ä–µ–¥–∞—Ç–µ–ª—å –†–æ–¥–∏–Ω—ã";
    }
  }
}
