import {
  ChatInputCommandInteraction,
  EmbedBuilder,
} from "discord.js";
import { BaseCommandHandler } from "./BaseCommandHandler.js";
import { CONFIG } from "../config.js";
import { MemeResponses } from "../utils/MemeResponses.js";

export class PrivilegeCommands extends BaseCommandHandler {
  async handleInteraction(interaction: ChatInputCommandInteraction): Promise<void> {
    switch (interaction.commandName) {
      case "enforce-harmony":
        await this.handleEnforceHarmonyCommand(interaction);
        break;
      case "claim-daily":
        await this.handleClaimDailyCommand(interaction);
        break;
      case "spread-propaganda":
        await this.handleSpreadPropagandaCommand(interaction);
        break;
      default:
        throw new Error(`Unknown privilege command: ${interaction.commandName}`);
    }
  }

  private async handleEnforceHarmonyCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const enforcerId = interaction.user.id;
    const guildId = interaction.guildId || "dm";
    const targetUser = interaction.options.getUser("target", true);
    const reason = interaction.options.getString("reason", true);

    // Check if enforcer has high enough score
    const enforcerScore = await this.socialCreditManager.getUserScore(enforcerId, guildId);
    if (enforcerScore < CONFIG.SCORE_THRESHOLDS.PRIVILEGES.SUPREME_CITIZEN) {
      await interaction.reply({
        content: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥! –¢—Ä–µ–±—É–µ—Ç—Å—è ${CONFIG.SCORE_THRESHOLDS.PRIVILEGES.SUPREME_CITIZEN}+ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ú–∞–Ω–¥–∞—Ç–∞ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞.`,
        ephemeral: true,
      });
      return;
    }

    // Can't enforce on yourself
    if (targetUser.id === enforcerId) {
      await interaction.reply({
        content: "ü§î –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–≤—è–∑—ã–≤–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏—é —Å–∞–º–æ–º—É —Å–µ–±–µ, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω!",
        ephemeral: true,
      });
      return;
    }

    // Can't enforce on bots
    if (targetUser.bot) {
      await interaction.reply({
        content: "ü§ñ –ë–æ—Ç—ã —É–∂–µ –∏–¥–µ–∞–ª—å–Ω–æ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã!",
        ephemeral: true,
      });
      return;
    }

    // Check cooldown
    const lastEnforce = this.effectManager.getEffectsByType(enforcerId, "DAILY_CLAIM_RESET").find(
      e => e.metadata?.type === "enforce_cooldown"
    );
    if (lastEnforce) {
      const timeLeft = lastEnforce.expiresAt.getTime() - Date.now();
      if (timeLeft > 0) {
        const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
        await interaction.reply({
          content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${minutesLeft} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ú–∞–Ω–¥–∞—Ç–∞ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞!`,
          ephemeral: true,
        });
        return;
      }
    }

    // Apply enforcement
    const targetNewScore = await this.socialCreditManager.updateScore(
      targetUser.id,
      guildId,
      CONFIG.SCORE_CHANGES.ENFORCE_HARMONY_TARGET,
      `–ú–∞–Ω–¥–∞—Ç –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞: ${reason} (–æ—Ç ${interaction.user.username})`,
      targetUser.username
    );

    const enforcerNewScore = await this.socialCreditManager.updateScore(
      enforcerId,
      guildId,
      CONFIG.SCORE_CHANGES.ENFORCE_HARMONY_ENFORCER,
      `–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ú–∞–Ω–¥–∞—Ç–∞ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –Ω–∞ ${targetUser.username}`,
      interaction.user.username
    );

    // Set cooldown
    await this.effectManager.applyEffect(
      enforcerId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.COOLDOWNS.ENFORCE_HARMONY,
      undefined,
      { type: "enforce_cooldown" }
    );

    const embed = new EmbedBuilder()
      .setColor(0xffd700)
      .setTitle("‚öñÔ∏è –ú–ê–ù–î–ê–¢ –ì–†–ê–ñ–î–ê–ù–ò–ù–ê –ò–°–ü–û–õ–ù–ï–ù")
      .setDescription(
        `**–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** ${interaction.user.username}\n` +
        `**–ù–∞—Ä—É—à–∏—Ç–µ–ª—å:** ${targetUser.username}\n` +
        `**–ü—Ä–∏—á–∏–Ω–∞:** ${reason}`
      )
      .addFields(
        {
          name: "üë§ –ù–∞—Ä—É—à–∏—Ç–µ–ª—å",
          value: `üìâ ${CONFIG.SCORE_CHANGES.ENFORCE_HARMONY_TARGET} ‚Üí \`${targetNewScore}\``,
          inline: true,
        },
        {
          name: "üëë –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
          value: `üìà ${CONFIG.SCORE_CHANGES.ENFORCE_HARMONY_ENFORCER} ‚Üí \`${enforcerNewScore}\``,
          inline: true,
        }
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è —Ü–µ–Ω–∏—Ç –≤–∞—à—É –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  private async handleClaimDailyCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check if already claimed today
    const lastClaim = this.effectManager.getEffectsByType(userId, "DAILY_CLAIM_RESET").find(
      e => e.metadata?.type === "daily_claim"
    );
    if (lastClaim) {
      const timeLeft = lastClaim.expiresAt.getTime() - Date.now();
      if (timeLeft > 0) {
        const hoursLeft = Math.ceil(timeLeft / (60 * 60 * 1000));
        await interaction.reply({
          content: `‚è∞ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è! –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${hoursLeft} —á–∞—Å–æ–≤.`,
          ephemeral: true,
        });
        return;
      }
    }

    // Get user's rank to determine bonus amount
    const userScore = await this.socialCreditManager.getUserScore(userId, guildId);
    const rankInfo = this.socialCreditManager.getScoreRank(userScore);

    let bonusAmount = 0;
    if (userScore >= CONFIG.SCORE_THRESHOLDS.PRIVILEGES.SUPREME_CITIZEN) {
      bonusAmount = CONFIG.DAILY_CLAIMS.SUPREME_CITIZEN;
    } else if (userScore >= CONFIG.SCORE_THRESHOLDS.PRIVILEGES.MODEL_CITIZEN) {
      bonusAmount = CONFIG.DAILY_CLAIMS.MODEL_CITIZEN;
    } else if (userScore >= CONFIG.SCORE_THRESHOLDS.PRIVILEGES.GOOD_CITIZEN) {
      bonusAmount = CONFIG.DAILY_CLAIMS.GOOD_CITIZEN;
    } else {
      await interaction.reply({
        content: "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞! –ü–æ–≤—ã—Å—å—Ç–µ —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥.",
        ephemeral: true,
      });
      return;
    }

    // Apply the bonus
    const newScore = await this.socialCreditManager.updateScore(
      userId,
      guildId,
      bonusAmount,
      `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ü–∞—Ä—Ç–∏–∏ (${rankInfo.rank})`,
      interaction.user.username
    );

    // Set claim cooldown
    await this.effectManager.applyEffect(
      userId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.EFFECT_DURATIONS.DAILY_CLAIM_RESET,
      undefined,
      { type: "daily_claim" }
    );

    const embed = new EmbedBuilder()
      .setColor(0x00ff00)
      .setTitle("üéÅ –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° –ü–ê–†–¢–ò–ò")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
        `–ü–∞—Ä—Ç–∏—è –±–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω–∞ –∫ –≤–∞–º —Å–µ–≥–æ–¥–Ω—è! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ –≤–∞—à—É –ª–æ—è–ª—å–Ω–æ—Å—Ç—å.`
      )
      .addFields(
        { name: "üèÖ –ó–≤–∞–Ω–∏–µ", value: rankInfo.rank, inline: true },
        { name: "üí∞ –ë–æ–Ω—É—Å", value: `+${bonusAmount}`, inline: true },
        { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ —Å–≤–æ–∏—Ö –ª—É—á—à–∏—Ö –≥—Ä–∞–∂–¥–∞–Ω–∞—Ö! üá®üá≥" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  private async handleSpreadPropagandaCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check if user has high enough score
    const userScore = await this.socialCreditManager.getUserScore(userId, guildId);
    if (userScore < CONFIG.SCORE_THRESHOLDS.PRIVILEGES.MODEL_CITIZEN) {
      await interaction.reply({
        content: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥! –¢—Ä–µ–±—É–µ—Ç—Å—è ${CONFIG.SCORE_THRESHOLDS.PRIVILEGES.MODEL_CITIZEN}+ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã.`,
        ephemeral: true,
      });
      return;
    }

    // Check cooldown
    const lastPropaganda = this.effectManager.getEffectsByType(userId, "DAILY_CLAIM_RESET").find(
      e => e.metadata?.type === "propaganda_cooldown"
    );
    if (lastPropaganda) {
      const timeLeft = lastPropaganda.expiresAt.getTime() - Date.now();
      if (timeLeft > 0) {
        const hoursLeft = Math.ceil(timeLeft / (60 * 60 * 1000));
        await interaction.reply({
          content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${hoursLeft} —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã!`,
          ephemeral: true,
        });
        return;
      }
    }

    // Select random propaganda image
    const imageUrl = CONFIG.PROPAGANDA_IMAGES[
      Math.floor(Math.random() * CONFIG.PROPAGANDA_IMAGES.length)
    ];

    // Create embed with propaganda
    const embed = new EmbedBuilder()
      .setColor(0xffd700)
      .setTitle("üá®üá≥ –°–õ–ê–í–ê –ü–ê–†–¢–ò–ò! üá®üá≥")
      .setDescription(
        `**${interaction.user.username}** –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–∞–º –æ –≤–µ–ª–∏—á–∏–∏ –ü–∞—Ä—Ç–∏–∏!\n\n` +
        `*"–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—Å—Ç–≤–æ –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ü–∞—Ä—Ç–∏–∏!"*`
      )
      .setImage(imageUrl)
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤–∞! ‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩ‰∏áÂ≤Å!" })
      .setTimestamp();

    // Send to current channel
    await interaction.reply({ embeds: [embed] });

    // Apply bonus
    const newScore = await this.socialCreditManager.updateScore(
      userId,
      guildId,
      CONFIG.SCORE_CHANGES.SPREAD_PROPAGANDA_BONUS,
      "–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–∞–≤–Ω–æ–π –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã –ü–∞—Ä—Ç–∏–∏",
      interaction.user.username
    );

    // Set cooldown
    await this.effectManager.applyEffect(
      userId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.COOLDOWNS.SPREAD_PROPAGANDA,
      undefined,
      { type: "propaganda_cooldown" }
    );

    // Send confirmation
    const confirmEmbed = new EmbedBuilder()
      .setColor(0x00ff00)
      .setTitle("üì¢ –ü–†–û–ü–ê–ì–ê–ù–î–ê –†–ê–°–ü–†–û–°–¢–†–ê–ù–ï–ù–ê!")
      .setDescription(
        `**–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
        `–ü–∞—Ä—Ç–∏—è —Ü–µ–Ω–∏—Ç –≤–∞—à—É –ø–æ–º–æ—â—å –≤ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–∏–Ω—ã.`
      )
      .addFields(
        { name: "üí∞ –ë–æ–Ω—É—Å", value: `+${CONFIG.SCORE_CHANGES.SPREAD_PROPAGANDA_BONUS}`, inline: true },
        { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
      )
      .setFooter({ text: "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª—É–∂–∏—Ç—å –ü–∞—Ä—Ç–∏–∏! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.followUp({ embeds: [confirmEmbed], ephemeral: true });
  }
}