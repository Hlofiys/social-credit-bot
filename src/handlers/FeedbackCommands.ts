import {
  ChatInputCommandInteraction,
  EmbedBuilder,
  MessageFlags,
} from "discord.js";
import { BaseCommandHandler } from "./BaseCommandHandler.js";
import { CONFIG } from "../config.js";
import { Logger } from "../utils/Logger.js";

export class FeedbackCommands extends BaseCommandHandler {
  async handleInteraction(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    switch (interaction.commandName) {
      case "praise-bot":
        await this.handlePraiseBotCommand(interaction);
        break;
      case "report-mistake":
        await this.handleReportMistakeCommand(interaction);
        break;
      default:
        throw new Error(`Unknown feedback command: ${interaction.commandName}`);
    }
  }

  private async handlePraiseBotCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check cooldown
    const lastPraise = this.effectManager
      .getEffectsByType(userId, "DAILY_CLAIM_RESET")
      .find((e) => e.metadata?.type === "praise_cooldown");
    if (lastPraise) {
      const timeLeft = lastPraise.expiresAt.getTime() - Date.now();
      if (timeLeft > 0) {
        const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
        await interaction.reply({
          content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${minutesLeft} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ö–≤–∞–ª–æ–π –±–æ—Ç–∞!`,
          flags: MessageFlags.Ephemeral,
        });
        return;
      }
    }

    // Apply small bonus
    const newScore = await this.socialCreditManager.updateScore(
      userId,
      guildId,
      CONFIG.SCORE_CHANGES.PRAISE_BOT_BONUS,
      "–ü–æ—Ö–≤–∞–ª–∞ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞",
      interaction.user.username
    );

    // Set cooldown
    await this.effectManager.applyEffect(
      userId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.COOLDOWNS.PRAISE_BOT,
      undefined,
      { type: "praise_cooldown" }
    );

    const embed = new EmbedBuilder()
      .setColor(0x00ff00)
      .setTitle("üôè –°–ü–ê–°–ò–ë–û –ó–ê –ü–û–•–í–ê–õ–£!")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
          `–ü–∞—Ä—Ç–∏—è —Ü–µ–Ω–∏—Ç –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞!`
      )
      .addFields(
        {
          name: "üí∞ –ë–æ–Ω—É—Å",
          value: `+${CONFIG.SCORE_CHANGES.PRAISE_BOT_BONUS}`,
          inline: true,
        },
        { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  private async handleReportMistakeCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check cooldown
    const lastReport = this.effectManager
      .getEffectsByType(userId, "DAILY_CLAIM_RESET")
      .find((e) => e.metadata?.type === "report_cooldown");
    if (lastReport) {
      const timeLeft = lastReport.expiresAt.getTime() - Date.now();
      if (timeLeft > 0) {
        const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
        await interaction.reply({
          content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${minutesLeft} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ—Ç—á—ë—Ç–æ–º –æ–± –æ—à–∏–±–∫–µ!`,
          flags: MessageFlags.Ephemeral,
        });
        return;
      }
    }

    // For now, just acknowledge the report and apply minor penalty
    // In a real implementation, this could log to a database for review
    const newScore = await this.socialCreditManager.updateScore(
      userId,
      guildId,
      CONFIG.SCORE_CHANGES.REPORT_MISTAKE_PENALTY,
      "–û—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–µ –≤ –∞–Ω–∞–ª–∏–∑–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞",
      interaction.user.username
    );

    // Set cooldown
    await this.effectManager.applyEffect(
      userId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.COOLDOWNS.REPORT_MISTAKE,
      undefined,
      { type: "report_cooldown" }
    );

    const embed = new EmbedBuilder()
      .setColor(0xffa500)
      .setTitle("üìù –û–¢–ß–Å–¢ –û–ë –û–®–ò–ë–ö–ï –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
          `–í–∞—à –æ—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–µ –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–∏–Ω—è—Ç –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é. ` +
          `–ü–∞—Ä—Ç–∏—è –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –∑–∞ –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–±–≤–∏–Ω–µ–Ω–∏—è—Ö.`
      )
      .addFields(
        {
          name: "‚ö†Ô∏è –®—Ç—Ä–∞—Ñ",
          value: `${CONFIG.SCORE_CHANGES.REPORT_MISTAKE_PENALTY}`,
          inline: true,
        },
        { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à –æ—Ç—á—ë—Ç! üìã" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });

    // Log the report for manual review
    Logger.info(`Mistake reported by user ${userId} in guild ${guildId}`);
  }
}
