import {
  ChatInputCommandInteraction,
  EmbedBuilder,
  MessageFlags,
} from "discord.js";
import { BaseCommandHandler } from "./BaseCommandHandler.js";

export class UtilityCommands extends BaseCommandHandler {
  async handleInteraction(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    switch (interaction.commandName) {
      case "rate-limit-status":
        await this.handleRateLimitStatusCommand(interaction);
        break;
      default:
        throw new Error(`Unknown utility command: ${interaction.commandName}`);
    }
  }

  private async handleRateLimitStatusCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    if (!this.rateLimitManager) {
      await interaction.reply({
        content: "‚ùå Rate limit manager not available.",
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    const status = this.rateLimitManager.getUserStatus(userId, guildId);
    const contextStats = this.messageContextManager?.getChannelStats() || {
      totalChannels: 0,
      totalMessages: 0,
    };

    const embed = new EmbedBuilder()
      .setColor(0x4169e1)
      .setTitle("‚è±Ô∏è –°–¢–ê–¢–£–° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –†–ï–ô–¢–ò–ù–ì–ê")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω:** ${interaction.user.username}\n*–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è*`
      )
      .addFields(
        {
          name: "üéØ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –†–µ–π—Ç–∏–Ω–≥",
          value: status.canReceivePositive
            ? "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
            : `‚ùå –ö—É–ª–¥–∞—É–Ω: ${Math.ceil(status.timeUntilPositive / 60000)} –º–∏–Ω`,
          inline: true,
        },
        {
          name: "üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤ –û–∫–Ω–µ",
          value: `${status.messagesInWindow}/10`,
          inline: true,
        },
        {
          name: "üìù –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö",
          value: `${status.bufferedMessages}`,
          inline: true,
        },
        {
          name: "‚è∞ –û–∫–Ω–æ –°–±—Ä–æ—Å–∏—Ç—Å—è",
          value: `${Math.ceil(status.windowTimeLeft / 1000)} —Å–µ–∫`,
          inline: true,
        },
        {
          name: "üåê –ö–æ–Ω—Ç–µ–∫—Å—Ç –ö–∞–Ω–∞–ª–æ–≤",
          value: `${contextStats.totalChannels}`,
          inline: true,
        },
        {
          name: "üí¨ –í—Å–µ–≥–æ –°–æ–æ–±—â–µ–Ω–∏–π",
          value: `${contextStats.totalMessages}`,
          inline: true,
        }
      )
      .setFooter({
        text: "–ü–∞—Ä—Ç–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ç–µ–º–ø! üëÅÔ∏è",
      })
      .setTimestamp();

    // Add warning if user is being rate limited
    if (!status.canReceivePositive || status.messagesInWindow >= 8) {
      embed.addFields({
        name: "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
        value:
          status.messagesInWindow >= 8
            ? "üö® –ë–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π! –°–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω—ã."
            : "‚è∞ –ö—É–ª–¥–∞—É–Ω –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω.",
        inline: false,
      });
    }

    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
  }
}
