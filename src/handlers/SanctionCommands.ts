import {
  ChatInputCommandInteraction,
  EmbedBuilder,
  Message,
  TextChannel,
  ReadonlyCollection,
  MessageFlags,
  ActionRowBuilder,
  ComponentType,
  ButtonBuilder,
  ButtonStyle,
  ButtonInteraction,
} from "discord.js";
import { BaseCommandHandler } from "./BaseCommandHandler.js";
import { CONFIG } from "../config.js";
import { Logger } from "../utils/Logger.js";

interface QuizQuestion {
  question: string;
  correctAnswer: string;
  options: string[];
}

interface Quiz {
  questions: QuizQuestion[];
  userAnswers: string[];
  correctCount: number;
}

export class SanctionCommands extends BaseCommandHandler {
  private isRateLimitError(error: unknown): boolean {
    if (error instanceof Error && error.message.includes("Status 429")) {
      return true;
    }

    if (typeof error === "object" && error !== null) {
      const err = error as Record<string, unknown>;
      if (typeof err.status === "number" && err.status === 429) return true;
      if (typeof err.code === "number" && err.code === 429) return true;
      if (typeof err.response === "object" && err.response !== null) {
        const resp = err.response as Record<string, unknown>;
        if (typeof resp.status === "number" && resp.status === 429) return true;
      }
    }

    return false;
  }

  async handleInteraction(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    try {
      switch (interaction.commandName) {
        // Basic sanction commands
        case "redeem-myself":
          await this.handleRedeemMyselfCommand(interaction);
          break;
        case "work-for-the-party":
          await this.handleWorkForThePartyCommand(interaction);
          break;
        // Enhanced sanction commands
        case "public-confession":
          await this.handlePublicConfessionCommand(interaction);
          break;
        case "community-service":
          await this.handleCommunityServiceCommand(interaction);
          break;
        case "loyalty-quiz":
          await this.handleLoyaltyQuizCommand(interaction);
          break;
        default:
          throw new Error(
            `Unknown sanction command: ${interaction.commandName}`
          );
      }
    } catch (error) {
      Logger.error(
        `Error in sanction command ${interaction.commandName}:`,
        error
      );

      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({
          content:
            "üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
          flags: MessageFlags.Ephemeral,
        });
      }
    }
  }

  // Basic Sanction Commands

  private async handleRedeemMyselfCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check if user qualifies for redemption (score <= -200)
    const score = await this.socialCreditManager.getUserScore(userId, guildId);
    if (score > CONFIG.SCORE_THRESHOLDS.PENALTIES.MODERATE) {
      await interaction.reply({
        content:
          "‚ùå –í—ã –Ω–µ –Ω—É–∂–¥–∞–µ—Ç–µ—Å—å –≤ –∏—Å–∫—É–ø–ª–µ–Ω–∏–∏, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω! –í–∞—à —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ –ø–æ—Ä—è–¥–∫–µ.",
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Check cooldown using metadata to distinguish different cooldown types
    const redeemEffects = this.effectManager
      .getEffectsByType(userId, "DAILY_CLAIM_RESET")
      .filter((e) => e.metadata?.type === "redeem_cooldown");

    if (redeemEffects.length > 0) {
      const lastRedeem = redeemEffects[0];
      const timeLeft = lastRedeem.expiresAt.getTime() - Date.now();
      if (timeLeft > 0) {
        const hoursLeft = Math.ceil(timeLeft / (60 * 60 * 1000));
        await interaction.reply({
          content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${hoursLeft} —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏—Å–∫—É–ø–ª–µ–Ω–∏–µ–º, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω!`,
          flags: MessageFlags.Ephemeral,
        });
        return;
      }
    }

    // Select random phrase
    const phrase =
      CONFIG.ANALYSIS.REDEEM_PHRASES[
        Math.floor(Math.random() * CONFIG.ANALYSIS.REDEEM_PHRASES.length)
      ];

    // Send the challenge
    const embed = new EmbedBuilder()
      .setColor(0xffa500)
      .setTitle("üôè –≠–î–ò–ö–¢ –ü–†–û–©–ï–ù–ò–Ø")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
          `–ü–∞—Ä—Ç–∏—è –¥–∞—ë—Ç –≤–∞–º —à–∞–Ω—Å –Ω–∞ –∏—Å–∫—É–ø–ª–µ–Ω–∏–µ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —ç—Ç—É —Ñ—Ä–∞–∑—É –≤ —á–∞—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥:\n\n` +
          `**"${phrase}"**\n\n` +
          `‚è±Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥!`
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –º–∏–ª–æ—Å–µ—Ä–¥–Ω–∞, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });

    // Set up cooldown
    await this.effectManager.applyEffect(
      userId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.COOLDOWNS.REDEEM_MYSELF,
      undefined,
      { type: "redeem_cooldown" }
    );

    // Wait for response
    const filter = (m: Message) =>
      m.author.id === userId && m.content.trim() === phrase;

    try {
      const channel = interaction.channel;
      if (!channel || !channel.isTextBased()) {
        throw new Error("Invalid channel");
      }

      const collector = (channel as TextChannel).createMessageCollector({
        filter,
        max: 1,
        time: 60000,
      });

      const collected: Message[] = await new Promise((resolve) => {
        collector.on("collect", (message: Message) => {
          resolve([message]);
        });
        collector.on(
          "end",
          (collected: ReadonlyCollection<string, Message>, reason: string) => {
            if (reason === "time") {
              resolve([]);
            }
          }
        );
      });

      if (collected && collected.length > 0) {
        // Success - grant forgiveness
        const newScore = await this.socialCreditManager.updateScore(
          userId,
          guildId,
          CONFIG.SCORE_CHANGES.REDEEM_SUCCESS,
          "–ò—Å–∫—É–ø–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≠–¥–∏–∫—Ç –ü—Ä–æ—â–µ–Ω–∏—è",
          interaction.user.username
        );

        const successEmbed = new EmbedBuilder()
          .setColor(0x00ff00)
          .setTitle("üéâ –ü–†–û–©–ï–ù–ò–ï –ü–û–õ–£–ß–ï–ù–û!")
          .setDescription(
            `**–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
              `–ü–∞—Ä—Ç–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∞—à–µ –∏—Å–∫—É–ø–ª–µ–Ω–∏–µ! –í–∞—à —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–≤—ã—à–µ–Ω.`
          )
          .addFields(
            {
              name: "üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –†–µ–π—Ç–∏–Ω–≥–∞",
              value: `+${CONFIG.SCORE_CHANGES.REDEEM_SUCCESS}`,
              inline: true,
            },
            { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
          )
          .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –≤—Å–µ–≥–¥–∞ –¥–∞—ë—Ç –≤—Ç–æ—Ä–æ–π —à–∞–Ω—Å! üá®üá≥" })
          .setTimestamp();

        await interaction.followUp({ embeds: [successEmbed] });
      }
    } catch {
      // Failure - penalize
      const newScore = await this.socialCreditManager.updateScore(
        userId,
        guildId,
        CONFIG.SCORE_CHANGES.REDEEM_FAILURE,
        "–ü—Ä–æ–≤–∞–ª –≠–¥–∏–∫—Ç–∞ –ü—Ä–æ—â–µ–Ω–∏—è - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ä–≤–µ–Ω–∏–µ",
        interaction.user.username
      );

      const failureEmbed = new EmbedBuilder()
        .setColor(0xff0000)
        .setTitle("‚ùå –ü–†–û–©–ï–ù–ò–ï –û–¢–ö–ê–ó–ê–ù–û")
        .setDescription(
          `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
            `–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã—Ä–∞–∑–∏—Ç—å –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å –ü–∞—Ä—Ç–∏–∏. –í–∞—à —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–Ω–∏–∂–µ–Ω.`
        )
        .addFields(
          {
            name: "üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –†–µ–π—Ç–∏–Ω–≥–∞",
            value: `${CONFIG.SCORE_CHANGES.REDEEM_FAILURE}`,
            inline: true,
          },
          { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
        )
        .setFooter({ text: "–ü–∞—Ä—Ç–∏—è —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∞ –≤–∞—à–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º! ‚ö†Ô∏è" })
        .setTimestamp();

      await interaction.followUp({ embeds: [failureEmbed] });
    }
  }

  private async handleWorkForThePartyCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check cooldown using metadata
    const workEffects = this.effectManager
      .getEffectsByType(userId, "DAILY_CLAIM_RESET")
      .filter((e) => e.metadata?.type === "work_cooldown");

    if (workEffects.length > 0) {
      const lastWork = workEffects[0];
      const timeLeft = lastWork.expiresAt.getTime() - Date.now();
      if (timeLeft > 0) {
        const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
        await interaction.reply({
          content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${minutesLeft} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–±–æ—Ç–æ–π –¥–ª—è –ü–∞—Ä—Ç–∏–∏!`,
          flags: MessageFlags.Ephemeral,
        });
        return;
      }
    }

    // Defer the reply since task generation may take time
    await interaction.deferReply();

    // Generate task using LLM
    const task = await this.generateWorkTask();

    const embed = new EmbedBuilder()
      .setColor(0xffa500)
      .setTitle("‚öíÔ∏è –†–ê–ë–û–¢–ê –î–õ–Ø –ü–ê–†–¢–ò–ò")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
          `–ü–∞—Ä—Ç–∏—è –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–π –ø–æ–º–æ—â–∏! –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n` +
          `**${task.question}**\n\n` +
          `‚è±Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥!`
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è —Ü–µ–Ω–∏—Ç –≤–∞—à—É –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.editReply({ embeds: [embed] });

    // Set cooldown
    await this.effectManager.applyEffect(
      userId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.COOLDOWNS.WORK_FOR_PARTY,
      undefined,
      { type: "work_cooldown" }
    );

    // Wait for response
    const filter = (m: Message) =>
      m.author.id === userId && m.content.trim() === task.answer;

    try {
      const channel = interaction.channel;
      if (!channel || !channel.isTextBased()) {
        throw new Error("Invalid channel");
      }

      const collector = (channel as TextChannel).createMessageCollector({
        filter,
        max: 1,
        time: 60000,
      });

      const collected: Message[] = await new Promise((resolve) => {
        collector.on("collect", (message: Message) => {
          resolve([message]);
        });
        collector.on(
          "end",
          (collected: ReadonlyCollection<string, Message>, reason: string) => {
            if (reason === "time") {
              resolve([]);
            }
          }
        );
      });

      if (collected && collected.length > 0) {
        // Success
        const newScore = await this.socialCreditManager.updateScore(
          userId,
          guildId,
          CONFIG.SCORE_CHANGES.WORK_FOR_PARTY_SUCCESS,
          "–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –ü–∞—Ä—Ç–∏–∏",
          interaction.user.username
        );

        const successEmbed = new EmbedBuilder()
          .setColor(0x00ff00)
          .setTitle("‚úÖ –†–ê–ë–û–¢–ê –í–´–ü–û–õ–ù–ï–ù–ê!")
          .setDescription(
            `**–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
              `–ü–∞—Ä—Ç–∏—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ –∑–∞ –≤–∞—à—É –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å.`
          )
          .addFields(
            {
              name: "üí∞ –ù–∞–≥—Ä–∞–¥–∞",
              value: `+${CONFIG.SCORE_CHANGES.WORK_FOR_PARTY_SUCCESS}`,
              inline: true,
            },
            { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
          )
          .setFooter({ text: "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª—É–∂–∏—Ç—å –ü–∞—Ä—Ç–∏–∏! üá®üá≥" })
          .setTimestamp();

        await interaction.followUp({ embeds: [successEmbed] });
      } else {
        // No reward for failure, just inform
        const failureEmbed = new EmbedBuilder()
          .setColor(0xff0000)
          .setTitle("‚ùå –ó–ê–î–ê–ù–ò–ï –ù–ï –í–´–ü–û–õ–ù–ï–ù–û")
          .setDescription(
            `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
              `–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ü–∞—Ä—Ç–∏–∏ –≤ —Å—Ä–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.`
          )
          .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –∂–¥—ë—Ç –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤! ‚ö†Ô∏è" })
          .setTimestamp();

        await interaction.followUp({ embeds: [failureEmbed] });
      }
    } catch (error) {
      Logger.error(`Error in work-for-the-party: ${error}`);
    }
  }

  // Enhanced Sanction Commands

  private async handlePublicConfessionCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check if user qualifies (negative score)
    const score = await this.socialCreditManager.getUserScore(userId, guildId);
    if (score >= 0) {
      await interaction.reply({
        content:
          "‚ùå –í–∞–º –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω–æ–µ –ø–æ–∫–∞—è–Ω–∏–µ, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω! –í–∞—à —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ –Ω–æ—Ä–º–µ.",
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Check cooldown
    const cooldownCheck = this.effectManager.isOnCooldown(
      userId,
      "CONFESSION_COOLDOWN"
    );
    if (cooldownCheck.onCooldown && cooldownCheck.timeLeft) {
      const hoursLeft = Math.ceil(cooldownCheck.timeLeft / (60 * 60 * 1000));
      await interaction.reply({
        content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${hoursLeft} —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø—É–±–ª–∏—á–Ω—ã–º –ø–æ–∫–∞—è–Ω–∏–µ–º!`,
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    await interaction.deferReply();

    try {
      // Generate personalized confession
      const confession = await this.generatePersonalizedConfession(
        interaction.user.username,
        score
      );

      // Create confession embed
      const embed = new EmbedBuilder()
        .setColor(0xff6b6b)
        .setTitle("üé≠ –ü–£–ë–õ–ò–ß–ù–û–ï –ü–û–ö–ê–Ø–ù–ò–ï")
        .setDescription(
          `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}** –≤—ã—Å—Ç—É–ø–∞–µ—Ç —Å –ø—É–±–ª–∏—á–Ω—ã–º –ø–æ–∫–∞—è–Ω–∏–µ–º:\n\n` +
            `*${confession}*`
        )
        .setFooter({
          text: "–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ - –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é! üá®üá≥",
        })
        .setTimestamp();

      await interaction.editReply({ embeds: [embed] });

      // Apply score bonus
      const bonus = Math.abs(Math.floor(score * 0.3)); // 30% of negative score as positive bonus
      const newScore = await this.socialCreditManager.updateScore(
        userId,
        guildId,
        bonus,
        "–ü—É–±–ª–∏—á–Ω–æ–µ –ø–æ–∫–∞—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—Ä–æ–¥–æ–º",
        interaction.user.username
      );

      // Set cooldown
      await this.effectManager.applyEffect(
        userId,
        guildId,
        "CONFESSION_COOLDOWN",
        CONFIG.COOLDOWNS.PUBLIC_CONFESSION
      );

      // Send confirmation to user
      const confirmEmbed = new EmbedBuilder()
        .setColor(0x00ff00)
        .setTitle("‚úÖ –ü–û–ö–ê–Ø–ù–ò–ï –ü–†–ò–ù–Ø–¢–û!")
        .setDescription(
          `–ü–∞—Ä—Ç–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∞—à–µ –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ —Ä–∞—Å–∫–∞—è–Ω–∏–µ.\n\n` +
            `**–ù–∞–≥—Ä–∞–¥–∞:** +${bonus} –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å\n` +
            `**–ù–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥:** ${newScore}`
        )
        .setFooter({ text: "–ü–∞—Ä—Ç–∏—è —Ü–µ–Ω–∏—Ç –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å! ü§ù" });

      await interaction.followUp({
        embeds: [confirmEmbed],
        flags: MessageFlags.Ephemeral,
      });
    } catch (error) {
      Logger.error(`Error in public confession: ${error}`);
      await interaction.editReply({
        content:
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
      });
    }
  }

  private async handleCommunityServiceCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check cooldown
    const cooldownCheck = this.effectManager.isOnCooldown(
      userId,
      "COMMUNITY_SERVICE_COOLDOWN"
    );
    if (cooldownCheck.onCooldown && cooldownCheck.timeLeft) {
      const hoursLeft = Math.ceil(cooldownCheck.timeLeft / (60 * 60 * 1000));
      await interaction.reply({
        content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${hoursLeft} —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–ª—É–∂–µ–Ω–∏–µ–º!`,
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    // Create service options
    const serviceOptions = [
      {
        id: "clean_propaganda",
        name: "üßπ –û—á–∏—Å—Ç–∫–∞ –ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—Å–∫–∏—Ö –ü–ª–∞–∫–∞—Ç–æ–≤",
        description: "–û—á–∏—Å—Ç–∏—Ç–µ –≥–æ—Ä–æ–¥—Å–∫–∏–µ –ø–ª–∞–∫–∞—Ç—ã –æ—Ç –ø—ã–ª–∏ –∏ –≥—Ä—è–∑–∏",
        reward: 15,
      },
      {
        id: "help_elderly",
        name: "üë¥ –ü–æ–º–æ—â—å –ü–æ–∂–∏–ª—ã–º –ì—Ä–∞–∂–¥–∞–Ω–∞–º",
        description: "–ü–æ–º–æ–≥–∏—Ç–µ –ø–æ–∂–∏–ª—ã–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º —Å –ø–æ–∫—É–ø–∫–∞–º–∏",
        reward: 20,
      },
      {
        id: "plant_trees",
        name: "üå≥ –û–∑–µ–ª–µ–Ω–µ–Ω–∏–µ –ì–æ—Ä–æ–¥–∞",
        description: "–ü–æ—Å–∞–¥–∏—Ç–µ –¥–µ—Ä–µ–≤—å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —ç–∫–æ–ª–æ–≥–∏–∏",
        reward: 25,
      },
    ];

    const randomService =
      serviceOptions[Math.floor(Math.random() * serviceOptions.length)];

    // Create interactive buttons
    const acceptButton = new ButtonBuilder()
      .setCustomId("accept_service")
      .setLabel("–ü—Ä–∏–Ω—è—Ç—å –°–ª—É–∂–µ–Ω–∏–µ")
      .setStyle(ButtonStyle.Success)
      .setEmoji("‚úÖ");

    const declineButton = new ButtonBuilder()
      .setCustomId("decline_service")
      .setLabel("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
      .setStyle(ButtonStyle.Danger)
      .setEmoji("‚ùå");

    const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
      acceptButton,
      declineButton
    );

    const embed = new EmbedBuilder()
      .setColor(0xffa500)
      .setTitle("ü§ù –û–ë–©–ï–°–¢–í–ï–ù–ù–û–ï –°–õ–£–ñ–ï–ù–ò–ï")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
          `–ü–∞—Ä—Ç–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–ª—É–∂–∏—Ç—å –æ–±—â–µ—Å—Ç–≤—É:\n\n` +
          `**${randomService.name}**\n` +
          `*${randomService.description}*\n\n` +
          `**–ù–∞–≥—Ä–∞–¥–∞:** +${randomService.reward} —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞\n\n` +
          `–ü—Ä–∏–º–µ—Ç–µ –ª–∏ –≤—ã —ç—Ç–æ –ø–æ—á–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ?`
      )
      .setFooter({ text: "–°–ª—É–∂–µ–Ω–∏–µ –Ω–∞—Ä–æ–¥—É - –≤—ã—Å—à–∞—è —á–µ—Å—Ç—å! üèõÔ∏è" })
      .setTimestamp();

    const response = await interaction.reply({
      embeds: [embed],
      components: [row],
    });

    try {
      const confirmation = await response.awaitMessageComponent({
        componentType: ComponentType.Button,
        time: 60000,
        filter: (i) => i.user.id === userId,
      });

      if (confirmation.customId === "accept_service") {
        // User accepted - simulate service task
        await confirmation.update({
          embeds: [
            new EmbedBuilder()
              .setColor(0x0099ff)
              .setTitle("‚è≥ –í–´–ü–û–õ–ù–ï–ù–ò–ï –°–õ–£–ñ–ï–ù–ò–Ø...")
              .setDescription(
                `–í—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–ª—É–∂–µ–Ω–∏–µ...\n\n` +
                  `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.`
              )
              .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –≤–∞—à–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º! üëÅÔ∏è" }),
          ],
          components: [],
        });

        // Simulate work time (3-5 seconds)
        await new Promise((resolve) =>
          setTimeout(resolve, 3000 + Math.random() * 2000)
        );

        // Apply reward
        const newScore = await this.socialCreditManager.updateScore(
          userId,
          guildId,
          randomService.reward,
          `–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–ª—É–∂–µ–Ω–∏–µ: ${randomService.name}`,
          interaction.user.username
        );

        // Set cooldown
        await this.effectManager.applyEffect(
          userId,
          guildId,
          "COMMUNITY_SERVICE_COOLDOWN",
          CONFIG.COOLDOWNS.COMMUNITY_SERVICE
        );

        const successEmbed = new EmbedBuilder()
          .setColor(0x00ff00)
          .setTitle("‚úÖ –°–õ–£–ñ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
          .setDescription(
            `**–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
              `–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–ª—É–∂–µ–Ω–∏–µ. –ü–∞—Ä—Ç–∏—è –≥–æ—Ä–¥–∏—Ç—Å—è –≤–∞–º–∏!`
          )
          .addFields(
            {
              name: "üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ó–∞–¥–∞–Ω–∏–µ",
              value: randomService.name,
              inline: false,
            },
            {
              name: "üí∞ –ù–∞–≥—Ä–∞–¥–∞",
              value: `+${randomService.reward}`,
              inline: true,
            },
            { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
          )
          .setFooter({ text: "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª—É–∂–∏—Ç—å –Ω–∞—Ä–æ–¥—É! üá®üá≥" })
          .setTimestamp();

        await confirmation.editReply({ embeds: [successEmbed] });
      } else {
        // User declined
        const declineEmbed = new EmbedBuilder()
          .setColor(0xff0000)
          .setTitle("‚ùå –°–õ–£–ñ–ï–ù–ò–ï –û–¢–ö–õ–û–ù–ï–ù–û")
          .setDescription(
            `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
              `–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–ª—É–∂–µ–Ω–∏—è. –ü–∞—Ä—Ç–∏—è –æ—Ç–º–µ—á–∞–µ—Ç —ç—Ç–æ –≤ –≤–∞—à–µ–º –¥–µ–ª–µ.`
          )
          .setFooter({ text: "–°–ª—É–∂–µ–Ω–∏–µ –Ω–∞—Ä–æ–¥—É –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ! ‚ö†Ô∏è" })
          .setTimestamp();

        await confirmation.update({
          embeds: [declineEmbed],
          components: [],
        });
      }
    } catch (error) {
      Logger.error(`Error in community service: ${error}`);
      await interaction.editReply({
        content: "‚è∞ –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ª—É–∂–µ–Ω–∏—è —É–ø—É—â–µ–Ω–∞.",
        components: [],
        embeds: [],
      });
    }
  }

  private async handleLoyaltyQuizCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check cooldown
    const cooldownCheck = this.effectManager.isOnCooldown(
      userId,
      "LOYALTY_QUIZ_COOLDOWN"
    );
    if (cooldownCheck.onCooldown && cooldownCheck.timeLeft) {
      const hoursLeft = Math.ceil(cooldownCheck.timeLeft / (60 * 60 * 1000));
      await interaction.reply({
        content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${hoursLeft} —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º –Ω–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å!`,
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    await interaction.deferReply({ flags: MessageFlags.Ephemeral });

    try {
      // Generate personalized quiz
      const quiz = await this.generateLoyaltyQuiz();
      await this.conductLoyaltyQuiz(interaction, quiz, guildId);
    } catch (error) {
      Logger.error(`Error in loyalty quiz: ${error}`);
      await interaction.editReply({
        content: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
      });
    }
  }

  // Helper methods

  private async generateWorkTask(): Promise<{
    question: string;
    answer: string;
  }> {
    const maxRetries = CONFIG.LLM.RETRY_ATTEMPTS;
    const baseDelay = CONFIG.LLM.RETRY_DELAY_MS;

    for (let attempt = 0; attempt <= maxRetries; attempt++) {
      try {
        const completion = await this.openai.chat.completions.create({
          model: CONFIG.LLM.STANDARD_MODEL,
          messages: [{ role: "user", content: CONFIG.WORK_TASK_PROMPT }],
          temperature: CONFIG.LLM.TEMPERATURE,
          max_tokens: CONFIG.LLM.MAX_TOKENS,
        });

        const response = completion.choices?.[0]?.message?.content;
        if (!response)
          throw new Error(
            "No response from OpenAI API for work task generation"
          );

        // Handle different response types
        const responseText =
          typeof response === "string" ? response : JSON.stringify(response);

        // Clean up the response text
        let jsonString = responseText.trim();
        jsonString = jsonString.replace(/```json\s*|\s*```/g, "").trim();

        // Try to parse the entire cleaned string as JSON first
        let parsed;
        try {
          parsed = JSON.parse(jsonString);
        } catch {
          // If direct parsing fails, try to extract JSON object
          const jsonStartIndex = jsonString.indexOf("{");
          if (jsonStartIndex === -1) {
            throw new Error("No JSON object found in response");
          }

          // Find the matching closing brace by counting braces
          let braceCount = 0;
          let jsonEndIndex = -1;
          for (let i = jsonStartIndex; i < jsonString.length; i++) {
            if (jsonString[i] === "{") {
              braceCount++;
            } else if (jsonString[i] === "}") {
              braceCount--;
              if (braceCount === 0) {
                jsonEndIndex = i;
                break;
              }
            }
          }

          if (jsonEndIndex === -1) {
            throw new Error("No matching closing brace found in JSON");
          }

          jsonString = jsonString.substring(jsonStartIndex, jsonEndIndex + 1);
          parsed = JSON.parse(jsonString);
        }

        if (!parsed || typeof parsed !== "object") {
          throw new Error("Parsed result is not a valid object");
        }

        if (!parsed.question || !parsed.answer) {
          throw new Error(
            "Invalid task format from LLM - missing question or answer"
          );
        }

        const answer =
          typeof parsed.answer === "string"
            ? parsed.answer.trim()
            : String(parsed.answer).trim();

        return {
          question: String(parsed.question),
          answer: answer,
        };
      } catch (error: unknown) {
        const isRateLimit = this.isRateLimitError(error);

        if (isRateLimit && attempt < maxRetries) {
          const delay = baseDelay * Math.pow(2, attempt);
          Logger.warn(
            `Rate limit hit, retrying in ${delay}ms (attempt ${
              attempt + 1
            }/${maxRetries + 1})`
          );
          await new Promise((resolve) => setTimeout(resolve, delay));
          continue;
        }

        Logger.error(
          `Error generating work task (attempt ${attempt + 1}/${
            maxRetries + 1
          }): ${error}`
        );
        if (attempt < maxRetries) {
          Logger.info(`Retrying work task generation...`);
          continue;
        }

        return {
          question: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?",
          answer: "4",
        };
      }
    }

    return {
      question: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?",
      answer: "4",
    };
  }

  private async generatePersonalizedConfession(
    username: string,
    score: number
  ): Promise<string> {
    try {
      const prompt = `
        –¢—ã - —Å–∏—Å—Ç–µ–º–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —Ä–∞–±–æ—Ç–∞—é—â–∞—è –Ω–∞ –±–ª–∞–≥–æ –ö–æ–º–º—É–Ω–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –ø–∞—Ä—Ç–∏–∏ –ö–∏—Ç–∞—è.
        –°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫–∞—è–Ω–∏–µ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º ${score}.

        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        1. –¢–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        2. –ü–æ–∫–∞—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–º –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
        3. –£–ø–æ–º—è–Ω–∏ –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å –ü–∞—Ä—Ç–∏–∏ –∏ –Ω–∞—Ä–æ–¥—É
        4. –î–ª–∏–Ω–∞: 100-200 —Å–ª–æ–≤
        5. –û—Ç–≤–µ—Ç–∏—Ç—å –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–º –ø–æ–∫–∞—è–Ω–∏—è, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π

        –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
        "–ì—Ä–∞–∂–¥–∞–Ω–µ! –Ø, [–∏–º—è], –ø—Ä–∏–∑–Ω–∞—é —Å–≤–æ–∏ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –≤–µ–ª–∏–∫–æ–π –ü–∞—Ä—Ç–∏–µ–π..."
      `;

      const completion = await this.openai.chat.completions.create({
        model: CONFIG.LLM.STANDARD_MODEL,
        messages: [{ role: "user", content: prompt }],
        temperature: 0.8,
        max_tokens: 400,
      });

      const confession = completion.choices?.[0]?.message?.content;
      return (
        confession ||
        `–ì—Ä–∞–∂–¥–∞–Ω–µ! –Ø, ${username}, –ø—Ä–∏–∑–Ω–∞—é —Å–≤–æ–∏ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –≤–µ–ª–∏–∫–æ–π –ü–∞—Ä—Ç–∏–µ–π –∏ –æ–±—è–∑—É—é—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å—Å—è, —Å–ª–µ–¥—É—è –ø—Ä–∏–Ω—Ü–∏–ø–∞–º —Å–æ—Ü–∏–∞–ª–∏–∑–º–∞ —Å –∫–∏—Ç–∞–π—Å–∫–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–æ–π!`
      );
    } catch (error) {
      Logger.error(`Error generating confession: ${error}`);
      return `–ì—Ä–∞–∂–¥–∞–Ω–µ! –Ø, ${username}, –ø—Ä–∏–∑–Ω–∞—é —Å–≤–æ–∏ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –≤–µ–ª–∏–∫–æ–π –ü–∞—Ä—Ç–∏–µ–π –∏ –æ–±—è–∑—É—é—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å—Å—è, —Å–ª–µ–¥—É—è –ø—Ä–∏–Ω—Ü–∏–ø–∞–º —Å–æ—Ü–∏–∞–ª–∏–∑–º–∞ —Å –∫–∏—Ç–∞–π—Å–∫–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–æ–π!`;
    }
  }

  private async generateLoyaltyQuiz(): Promise<Quiz> {
    try {
      const prompt = `
        –°–æ–∑–¥–∞–π —Ç–µ—Å—Ç –Ω–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ö–æ–º–º—É–Ω–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –ø–∞—Ä—Ç–∏–∏ –ö–∏—Ç–∞—è.

        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        1. 3 –≤–æ–ø—Ä–æ—Å–∞ —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–∂–¥—ã–π
        2. –í–æ–ø—Ä–æ—Å—ã –æ –∫–∏—Ç–∞–π—Å–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏, –ø–æ–ª–∏—Ç–∏–∫–µ, —Å–æ—Ü–∏–∞–ª–∏–∑–º–µ
        3. –û–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        4. –û—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ

        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
        {
          "questions": [
            {
              "question": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞?",
              "options": ["A) –≤–∞—Ä–∏–∞–Ω—Ç 1", "B) –≤–∞—Ä–∏–∞–Ω—Ç 2", "C) –≤–∞—Ä–∏–∞–Ω—Ç 3", "D) –≤–∞—Ä–∏–∞–Ω—Ç 4"],
              "correctAnswer": "A"
            }
          ]
        }
      `;

      const completion = await this.openai.chat.completions.create({
        model: CONFIG.LLM.STANDARD_MODEL,
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7,
        max_tokens: 800,
      });

      const response = completion.choices?.[0]?.message?.content;
      if (!response) throw new Error("No response from LLM");

      let jsonString = response.trim();
      jsonString = jsonString.replace(/```json\s*|\s*```/g, "").trim();

      const parsed = JSON.parse(jsonString);

      if (!parsed.questions || !Array.isArray(parsed.questions)) {
        throw new Error("Invalid quiz format");
      }

      const quiz: Quiz = {
        questions: parsed.questions.map(
          (q: {
            question: string;
            correctAnswer: string;
            options: string[];
          }) => ({
            question: q.question,
            correctAnswer: q.correctAnswer,
            options: q.options,
          })
        ),
        userAnswers: [],
        correctCount: 0,
      };

      return quiz;
    } catch (error) {
      Logger.error(`Error generating loyalty quiz: ${error}`);
      return {
        questions: [
          {
            question: "–ö–æ–≥–¥–∞ –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –ö–æ–º–º—É–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—Ä—Ç–∏—è –ö–∏—Ç–∞—è?",
            options: ["A) 1919", "B) 1921", "C) 1949", "D) 1950"],
            correctAnswer: "B",
          },
          {
            question: "–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–∞—Ä—ë–º –ö–ü–ö?",
            options: [
              "A) –ú–∞–æ –¶–∑—ç–¥—É–Ω",
              "B) –î—ç–Ω –°—è–æ–ø–∏–Ω",
              "C) –°–∏ –¶–∑–∏–Ω—å–ø–∏–Ω",
              "D) –•—É –¶–∑–∏–Ω—å—Ç–∞–æ",
            ],
            correctAnswer: "C",
          },
          {
            question: "–ö–∞–∫–æ–π –ø—Ä–∏–Ω—Ü–∏–ø –ª–µ–∂–∏—Ç –≤ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –ö–∏—Ç–∞—è?",
            options: [
              "A) –ö–∞–ø–∏—Ç–∞–ª–∏–∑–º",
              "B) –°–æ—Ü–∏–∞–ª–∏–∑–º —Å –∫–∏—Ç–∞–π—Å–∫–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–æ–π",
              "C) –õ–∏–±–µ—Ä–∞–ª–∏–∑–º",
              "D) –ê–Ω–∞—Ä—Ö–∏–∑–º",
            ],
            correctAnswer: "B",
          },
        ],
        userAnswers: [],
        correctCount: 0,
      };
    }
  }

  private async conductLoyaltyQuiz(
    interaction: ChatInputCommandInteraction,
    quiz: Quiz,
    guildId: string
  ): Promise<void> {
    const userId = interaction.user.id;
    let currentQuestion = 0;

    const askQuestion = async (): Promise<void> => {
      if (currentQuestion >= quiz.questions.length) {
        await this.showQuizResults(interaction, quiz, guildId);
        return;
      }

      const question = quiz.questions[currentQuestion];

      const buttons = question.options.map((option, index) =>
        new ButtonBuilder()
          .setCustomId(`quiz_${String.fromCharCode(65 + index)}`)
          .setLabel(option)
          .setStyle(ButtonStyle.Primary)
      );

      const rows = [
        new ActionRowBuilder<ButtonBuilder>().addComponents(
          buttons.slice(0, 2)
        ),
        new ActionRowBuilder<ButtonBuilder>().addComponents(
          buttons.slice(2, 4)
        ),
      ];

      const embed = new EmbedBuilder()
        .setColor(0xdc143c)
        .setTitle("üéì –¢–ï–°–¢ –ù–ê –õ–û–Ø–õ–¨–ù–û–°–¢–¨")
        .setDescription(
          `**–í–æ–ø—Ä–æ—Å ${currentQuestion + 1} –∏–∑ ${quiz.questions.length}**\n\n` +
            `${question.question}`
        )
        .setFooter({ text: "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ üëá" })
        .setTimestamp();

      const message = await interaction.editReply({
        embeds: [embed],
        components: rows,
      });

      try {
        const response = await message.awaitMessageComponent({
          componentType: ComponentType.Button,
          time: 30000,
          filter: (i: ButtonInteraction) =>
            i.user.id === userId && i.customId.startsWith("quiz_"),
        });

        const selectedAnswer = response.customId.replace("quiz_", "");
        quiz.userAnswers.push(selectedAnswer);

        if (selectedAnswer === question.correctAnswer) {
          quiz.correctCount++;
        }

        currentQuestion++;
        await response.deferUpdate();
        await askQuestion();
      } catch (error) {
        Logger.error(`Quiz timeout or error: ${error}`);
        await interaction.editReply({
          content: "‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –∏—Å—Ç–µ–∫–ª–æ. –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω.",
          components: [],
          embeds: [],
        });
      }
    };

    await askQuestion();
  }

  private async showQuizResults(
    interaction: ChatInputCommandInteraction,
    quiz: Quiz,
    guildId: string
  ): Promise<void> {
    const userId = interaction.user.id;
    const score = Math.round((quiz.correctCount / quiz.questions.length) * 100);

    let resultColor = 0xff0000;
    let resultTitle = "‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–ê–Ø –õ–û–Ø–õ–¨–ù–û–°–¢–¨";
    let scoreChange = -10;

    if (score >= 80) {
      resultColor = 0x00ff00;
      resultTitle = "‚úÖ –û–¢–õ–ò–ß–ù–ê–Ø –õ–û–Ø–õ–¨–ù–û–°–¢–¨";
      scoreChange = 30;
    } else if (score >= 60) {
      resultColor = 0xffa500;
      resultTitle = "‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–ê–Ø –õ–û–Ø–õ–¨–ù–û–°–¢–¨";
      scoreChange = 10;
    }

    const newScore = await this.socialCreditManager.updateScore(
      userId,
      guildId,
      scoreChange,
      `–¢–µ—Å—Ç –Ω–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å: ${quiz.correctCount}/${quiz.questions.length} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤`,
      interaction.user.username
    );

    await this.effectManager.applyEffect(
      userId,
      guildId,
      "LOYALTY_QUIZ_COOLDOWN",
      CONFIG.COOLDOWNS.LOYALTY_QUIZ
    );

    const embed = new EmbedBuilder()
      .setColor(resultColor)
      .setTitle(resultTitle)
      .setDescription(
        `**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å:**\n\n` +
          `**–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:** ${quiz.correctCount} –∏–∑ ${quiz.questions.length}\n` +
          `**–ü—Ä–æ—Ü–µ–Ω—Ç:** ${score}%\n` +
          `**–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞:** ${scoreChange > 0 ? "+" : ""}${scoreChange}\n` +
          `**–ù–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥:** ${newScore}`
      )
      .setFooter({
        text:
          scoreChange > 0
            ? "–ü–∞—Ä—Ç–∏—è –≥–æ—Ä–¥–∏—Ç—Å—è –≤–∞—à–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏! üá®üá≥"
            : "–ò–∑—É—á–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –ü–∞—Ä—Ç–∏–∏ –ª—É—á—à–µ! üìö",
      })
      .setTimestamp();

    await interaction.editReply({
      embeds: [embed],
      components: [],
    });
  }
}
