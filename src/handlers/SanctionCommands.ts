import {
  ChatInputCommandInteraction,
  EmbedBuilder,
} from "discord.js";
import { BaseCommandHandler } from "./BaseCommandHandler.js";
import { CONFIG } from "../config.js";
import { Logger } from "../utils/Logger.js";

export class SanctionCommands extends BaseCommandHandler {
  async handleInteraction(interaction: ChatInputCommandInteraction): Promise<void> {
    switch (interaction.commandName) {
      case "redeem-myself":
        await this.handleRedeemMyselfCommand(interaction);
        break;
      case "work-for-the-party":
        await this.handleWorkForThePartyCommand(interaction);
        break;
      default:
        throw new Error(`Unknown sanction command: ${interaction.commandName}`);
    }
  }

  private async handleRedeemMyselfCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check if user qualifies for redemption (score <= -200)
    const score = await this.socialCreditManager.getUserScore(userId, guildId);
    if (score > CONFIG.SCORE_THRESHOLDS.PENALTIES.MODERATE) {
      await interaction.reply({
        content: "‚ùå –í—ã –Ω–µ –Ω—É–∂–¥–∞–µ—Ç–µ—Å—å –≤ –∏—Å–∫—É–ø–ª–µ–Ω–∏–∏, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω! –í–∞—à —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ –ø–æ—Ä—è–¥–∫–µ.",
        ephemeral: true,
      });
      return;
    }

    // Check cooldown
    const lastRedeem = this.effectManager.getEffectsByType(userId, "DAILY_CLAIM_RESET").find(
      e => e.metadata?.type === "redeem_cooldown"
    );
    if (lastRedeem) {
      const timeLeft = lastRedeem.expiresAt.getTime() - Date.now();
      if (timeLeft > 0) {
        const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
        await interaction.reply({
          content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${minutesLeft} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏—Å–∫—É–ø–ª–µ–Ω–∏–µ–º, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω!`,
          ephemeral: true,
        });
        return;
      }
    }

    // Select random phrase
    const phrase = CONFIG.ANALYSIS.REDEEM_PHRASES[
      Math.floor(Math.random() * CONFIG.ANALYSIS.REDEEM_PHRASES.length)
    ];

    // Send the challenge
    const embed = new EmbedBuilder()
      .setColor(0xffa500)
      .setTitle("üôè –≠–î–ò–ö–¢ –ü–†–û–©–ï–ù–ò–Ø")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
        `–ü–∞—Ä—Ç–∏—è –¥–∞—ë—Ç –≤–∞–º —à–∞–Ω—Å –Ω–∞ –∏—Å–∫—É–ø–ª–µ–Ω–∏–µ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —ç—Ç—É —Ñ—Ä–∞–∑—É –≤ —á–∞—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥:\n\n` +
        `**"${phrase}"**\n\n` +
        `‚è±Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥!`
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –º–∏–ª–æ—Å–µ—Ä–¥–Ω–∞, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });

    // Set up cooldown
    await this.effectManager.applyEffect(
      userId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.COOLDOWNS.REDEEM_MYSELF,
      undefined,
      { type: "redeem_cooldown" }
    );

    // Wait for response
    const filter = (m: any) => m.author.id === userId && m.content.trim() === phrase;

    try {
      const channel = interaction.channel;
      if (!channel || !channel.isTextBased()) {
        throw new Error("Invalid channel");
      }

      const collector = (channel as any).createMessageCollector({
        filter,
        max: 1,
        time: 60000
      });

      const collected: any[] = await new Promise((resolve) => {
        collector.on('collect', (message: any) => {
          resolve([message]);
        });
        collector.on('end', (collected: any, reason: string) => {
          if (reason === 'time') {
            resolve([]);
          }
        });
      });

      if (collected && collected.length > 0) {
        // Success - grant forgiveness
        const newScore = await this.socialCreditManager.updateScore(
          userId,
          guildId,
          CONFIG.SCORE_CHANGES.REDEEM_SUCCESS,
          "–ò—Å–∫—É–ø–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≠–¥–∏–∫—Ç –ü—Ä–æ—â–µ–Ω–∏—è",
          interaction.user.username
        );

        const successEmbed = new EmbedBuilder()
          .setColor(0x00ff00)
          .setTitle("üéâ –ü–†–û–©–ï–ù–ò–ï –ü–û–õ–£–ß–ï–ù–û!")
          .setDescription(
            `**–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
            `–ü–∞—Ä—Ç–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∞—à–µ –∏—Å–∫—É–ø–ª–µ–Ω–∏–µ! –í–∞—à —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–≤—ã—à–µ–Ω.`
          )
          .addFields(
            { name: "üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –†–µ–π—Ç–∏–Ω–≥–∞", value: `+${CONFIG.SCORE_CHANGES.REDEEM_SUCCESS}`, inline: true },
            { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
          )
          .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –≤—Å–µ–≥–¥–∞ –¥–∞—ë—Ç –≤—Ç–æ—Ä–æ–π —à–∞–Ω—Å! üá®üá≥" })
          .setTimestamp();

        await interaction.followUp({ embeds: [successEmbed] });
      }
    } catch {
      // Failure - penalize
      const newScore = await this.socialCreditManager.updateScore(
        userId,
        guildId,
        CONFIG.SCORE_CHANGES.REDEEM_FAILURE,
        "–ü—Ä–æ–≤–∞–ª –≠–¥–∏–∫—Ç–∞ –ü—Ä–æ—â–µ–Ω–∏—è - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ä–≤–µ–Ω–∏–µ",
        interaction.user.username
      );

      const failureEmbed = new EmbedBuilder()
        .setColor(0xff0000)
        .setTitle("‚ùå –ü–†–û–©–ï–ù–ò–ï –û–¢–ö–ê–ó–ê–ù–û")
        .setDescription(
          `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
          `–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã—Ä–∞–∑–∏—Ç—å –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å –ü–∞—Ä—Ç–∏–∏. –í–∞—à —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–Ω–∏–∂–µ–Ω.`
        )
        .addFields(
          { name: "üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –†–µ–π—Ç–∏–Ω–≥–∞", value: `${CONFIG.SCORE_CHANGES.REDEEM_FAILURE}`, inline: true },
          { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
        )
        .setFooter({ text: "–ü–∞—Ä—Ç–∏—è —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∞ –≤–∞—à–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º! ‚ö†Ô∏è" })
        .setTimestamp();

      await interaction.followUp({ embeds: [failureEmbed] });
    }
  }

  private async handleWorkForThePartyCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    const userId = interaction.user.id;
    const guildId = interaction.guildId || "dm";

    // Check cooldown
    const lastWork = this.effectManager.getEffectsByType(userId, "DAILY_CLAIM_RESET").find(
      e => e.metadata?.type === "work_cooldown"
    );
    if (lastWork) {
      const timeLeft = lastWork.expiresAt.getTime() - Date.now();
      if (timeLeft > 0) {
        const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
        await interaction.reply({
          content: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${minutesLeft} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–±–æ—Ç–æ–π –¥–ª—è –ü–∞—Ä—Ç–∏–∏!`,
          ephemeral: true,
        });
        return;
      }
    }

    // Select random task
    const task = CONFIG.WORK_TASKS[Math.floor(Math.random() * CONFIG.WORK_TASKS.length)];

    const embed = new EmbedBuilder()
      .setColor(0xffa500)
      .setTitle("‚öíÔ∏è –†–ê–ë–û–¢–ê –î–õ–Ø –ü–ê–†–¢–ò–ò")
      .setDescription(
        `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
        `–ü–∞—Ä—Ç–∏—è –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–π –ø–æ–º–æ—â–∏! –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n` +
        `**${task.question}**\n\n` +
        `‚è±Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥!`
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è —Ü–µ–Ω–∏—Ç –≤–∞—à—É –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });

    // Set cooldown
    await this.effectManager.applyEffect(
      userId,
      guildId,
      "DAILY_CLAIM_RESET",
      CONFIG.COOLDOWNS.WORK_FOR_PARTY,
      undefined,
      { type: "work_cooldown" }
    );

    // Wait for response
    const filter = (m: any) => m.author.id === userId && m.content.trim() === task.answer;

    try {
      const channel = interaction.channel;
      if (!channel || !channel.isTextBased()) {
        throw new Error("Invalid channel");
      }

      const collector = (channel as any).createMessageCollector({
        filter,
        max: 1,
        time: 60000
      });

      const collected: any[] = await new Promise((resolve) => {
        collector.on('collect', (message: any) => {
          resolve([message]);
        });
        collector.on('end', (collected: any, reason: string) => {
          if (reason === 'time') {
            resolve([]);
          }
        });
      });

      if (collected && collected.length > 0) {
        // Success
        const newScore = await this.socialCreditManager.updateScore(
          userId,
          guildId,
          CONFIG.SCORE_CHANGES.WORK_FOR_PARTY_SUCCESS,
          "–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –ü–∞—Ä—Ç–∏–∏",
          interaction.user.username
        );

        const successEmbed = new EmbedBuilder()
          .setColor(0x00ff00)
          .setTitle("‚úÖ –†–ê–ë–û–¢–ê –í–´–ü–û–õ–ù–ï–ù–ê!")
          .setDescription(
            `**–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
            `–ü–∞—Ä—Ç–∏—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ –∑–∞ –≤–∞—à—É –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å.`
          )
          .addFields(
            { name: "üí∞ –ù–∞–≥—Ä–∞–¥–∞", value: `+${CONFIG.SCORE_CHANGES.WORK_FOR_PARTY_SUCCESS}`, inline: true },
            { name: "üíØ –ù–æ–≤—ã–π –†–µ–π—Ç–∏–Ω–≥", value: `${newScore}`, inline: true }
          )
          .setFooter({ text: "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª—É–∂–∏—Ç—å –ü–∞—Ä—Ç–∏–∏! üá®üá≥" })
          .setTimestamp();

        await interaction.followUp({ embeds: [successEmbed] });
      } else {
        // No reward for failure, just inform
        const failureEmbed = new EmbedBuilder()
          .setColor(0xff0000)
          .setTitle("‚ùå –ó–ê–î–ê–ù–ò–ï –ù–ï –í–´–ü–û–õ–ù–ï–ù–û")
          .setDescription(
            `**–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${interaction.user.username}!**\n\n` +
            `–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ü–∞—Ä—Ç–∏–∏ –≤ —Å—Ä–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.`
          )
          .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –∂–¥—ë—Ç –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤! ‚ö†Ô∏è" })
          .setTimestamp();

        await interaction.followUp({ embeds: [failureEmbed] });
      }
    } catch (error) {
      Logger.error(`Error in work-for-the-party: ${error}`);
    }
  }
}