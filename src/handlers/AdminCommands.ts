import {
  ChatInputCommandInteraction,
  EmbedBuilder,
  PermissionFlagsBits,
  ChannelType,
} from "discord.js";
import { BaseCommandHandler } from "./BaseCommandHandler.js";

export class AdminCommands extends BaseCommandHandler {
  async handleInteraction(interaction: ChatInputCommandInteraction): Promise<void> {
    switch (interaction.commandName) {
      case "set-monitor-channel":
        await this.handleSetMonitorChannelCommand(interaction);
        break;
      case "remove-monitor-channel":
        await this.handleRemoveMonitorChannelCommand(interaction);
        break;
      case "list-monitored-channels":
        await this.handleListMonitoredChannelsCommand(interaction);
        break;
      default:
        throw new Error(`Unknown admin command: ${interaction.commandName}`);
    }
  }

  private async handleSetMonitorChannelCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    // Check if user has admin permissions
    if (
      !interaction.memberPermissions?.has(PermissionFlagsBits.Administrator)
    ) {
      await interaction.reply({
        content:
          "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–∏–π–Ω—ã–µ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã) –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!",
        ephemeral: true,
      });
      return;
    }

    const channel = interaction.options.getChannel("channel");
    const guildId = interaction.guildId!;

    if (!channel || channel.type !== ChannelType.GuildText) {
      await interaction.reply({
        content:
          "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
        ephemeral: true,
      });
      return;
    }

    // Add channel to monitored channels (both memory and database)
    await this.addMonitoredChannelPersistent(
      guildId,
      channel.id,
      channel.name || "Unknown Channel",
      interaction.user.id
    );

    const embed = new EmbedBuilder()
      .setColor(0x00ff00)
      .setTitle("üéØ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")
      .setDescription(
        `–ö–∞–Ω–∞–ª ${channel} —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞!`
      )
      .addFields(
        { name: "üì∫ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –ö–∞–Ω–∞–ª", value: `${channel}`, inline: true },
        { name: "üëÅÔ∏è –°—Ç–∞—Ç—É—Å", value: "–ê–ö–¢–ò–í–ï–ù", inline: true }
      )
      .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –≤–∏–¥–∏—Ç –≤—Å—ë! üëÅÔ∏è" })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  private async handleRemoveMonitorChannelCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    // Check if user has admin permissions
    if (
      !interaction.memberPermissions?.has(PermissionFlagsBits.Administrator)
    ) {
      await interaction.reply({
        content:
          "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–∏–π–Ω—ã–µ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã) –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º!",
        ephemeral: true,
      });
      return;
    }

    const channel = interaction.options.getChannel("channel");
    const guildId = interaction.guildId!;

    if (!channel || channel.type !== ChannelType.GuildText) {
      await interaction.reply({
        content: "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª.",
        ephemeral: true,
      });
      return;
    }

    try {
      const removed = await this.removeMonitoredChannelPersistent(
        guildId,
        channel.id
      );

      if (removed) {
        const embed = new EmbedBuilder()
          .setColor(0xff4500)
          .setTitle("üö´ –ú–û–ù–ò–¢–û–†–ò–ù–ì –û–¢–ö–õ–Æ–ß–Å–ù")
          .setDescription(
            `–ö–∞–Ω–∞–ª ${channel} –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.`
          )
          .addFields(
            { name: "üì∫ –ö–∞–Ω–∞–ª", value: `${channel}`, inline: true },
            { name: "üëÅÔ∏è –°—Ç–∞—Ç—É—Å", value: "–û–¢–ö–õ–Æ–ß–Å–ù", inline: true }
          )
          .setFooter({ text: "–ü–∞—Ä—Ç–∏—è –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º." })
          .setTimestamp();

        await interaction.reply({ embeds: [embed] });
      } else {
        await interaction.reply({
          content: `‚ùå –ö–∞–Ω–∞–ª ${channel} –Ω–µ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.`,
          ephemeral: true,
        });
      }
    } catch (error) {
      await interaction.reply({
        content: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
        ephemeral: true,
      });
    }
  }

  private async handleListMonitoredChannelsCommand(
    interaction: ChatInputCommandInteraction
  ): Promise<void> {
    // Check if user has admin permissions
    if (
      !interaction.memberPermissions?.has(PermissionFlagsBits.Administrator)
    ) {
      await interaction.reply({
        content:
          "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–∏–π–Ω—ã–µ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã) –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!",
        ephemeral: true,
      });
      return;
    }

    const guildId = interaction.guildId!;

    try {
      const channelInfo =
        await this.databaseManager.getMonitoredChannelInfo(guildId);

      if (channelInfo.length === 0) {
        await interaction.reply({
          content:
            "üìä –í —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/set-monitor-channel` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.",
          ephemeral: true,
        });
        return;
      }

      const embed = new EmbedBuilder()
        .setColor(0x4169e1)
        .setTitle("üì∫ –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–ï –ö–ê–ù–ê–õ–´")
        .setDescription("*–ö–∞–Ω–∞–ª—ã –ø–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞*")
        .setTimestamp();

      let description = "";
      for (const info of channelInfo) {
        const channel = `<#${info.channelId}>`;
        const addedDate = info.addedAt.toLocaleDateString();
        description += `${channel}\n`;
        description += `‚îî –î–æ–±–∞–≤–ª–µ–Ω: ${addedDate} | <@${info.addedBy}>\n\n`;
      }

      embed.addFields({
        name: `üëÅÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${channelInfo.length}`,
        value: description,
        inline: false,
      });

      embed.setFooter({ text: "–ü–∞—Ä—Ç–∏—è –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –≤—Å–µ–º–∏! üëÅÔ∏è" });

      await interaction.reply({ embeds: [embed], ephemeral: true });
    } catch (error) {
      await interaction.reply({
        content: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.",
        ephemeral: true,
      });
    }
  }
}