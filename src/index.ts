import { Client, GatewayIntentBits, Events, Message, EmbedBuilder, SlashCommandBuilder, REST, Routes, ChannelType } from 'discord.js';
import { Mistral } from '@mistralai/mistralai';
import * as dotenv from 'dotenv';
import { SocialCreditManager } from './managers/SocialCreditManager';
import { DatabaseManager } from './managers/DatabaseManager';
import { MemeResponses } from './utils/MemeResponses';
import { CommandHandler } from './handlers/CommandHandler';
import { Logger } from './utils/Logger';
import { Validators } from './utils/Validators';

dotenv.config();

class SocialCreditBot {
    private client: Client;
    private mistral: Mistral;
    private socialCreditManager: SocialCreditManager;
    private databaseManager: DatabaseManager;
    private commandHandler: CommandHandler;
    private monitoredChannels: Set<string> = new Set();

    constructor() {
        this.client = new Client({
            intents: [
                GatewayIntentBits.Guilds,
                GatewayIntentBits.GuildMessages,
                GatewayIntentBits.MessageContent,
                GatewayIntentBits.GuildMembers
            ]
        });

        this.mistral = new Mistral({
            apiKey: process.env.MISTRAL_API_KEY || ''
        });

        this.databaseManager = new DatabaseManager();
        this.socialCreditManager = new SocialCreditManager(this.databaseManager);
        this.commandHandler = new CommandHandler(this.socialCreditManager, this.databaseManager);

        this.setupEventListeners();
    }

    private setupEventListeners(): void {
        this.client.once(Events.ClientReady, (readyClient) => {
            Logger.info(`üöÄ ${readyClient.user.tag} is ready to monitor social credits!`);
            this.registerCommands();
        });

        this.client.on(Events.MessageCreate, this.handleMessage.bind(this));
        this.client.on(Events.InteractionCreate, this.commandHandler.handleInteraction.bind(this.commandHandler));
    }

    private async handleMessage(message: Message): Promise<void> {
        // Ignore bot messages and non-monitored channels
        if (message.author.bot) return;
        const guildId = message.guild?.id || 'dm';
        if (!this.commandHandler.isChannelMonitored(guildId, message.channelId)) return;

        // Skip messages with attachments, links, or embeds
        if (message.attachments.size > 0 || 
            message.embeds.length > 0 || 
            Validators.containsLinks(message.content)) {
            return;
        }

        // Skip empty messages
        if (!message.content.trim()) return;

        try {
            const sanitizedContent = Validators.sanitizeMessage(message.content);
            const analysis = await this.analyzeMessage(sanitizedContent);
            await this.processAnalysis(message, analysis, sanitizedContent);
        } catch (error) {
            Logger.error('Error processing message:', error);
        }
    }


    private async analyzeMessage(content: string): Promise<any> {
        const prompt = `–¢—ã - –í–µ—Ä—Ö–æ–≤–Ω—ã–π –ò–ò –ö–∏—Ç–∞–π—Å–∫–æ–π –°–∏—Å—Ç–µ–º—ã –°–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –†–µ–π—Ç–∏–Ω–≥–∞ (–º–µ–º –≤–µ—Ä—Å–∏—è). –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —Ö–æ—Ä–æ—à–æ –ª–∏ –æ–Ω–æ, –ø–ª–æ—Ö–æ –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.

–°–æ–æ–±—â–µ–Ω–∏–µ: "${content}"

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û —á–∏—Å—Ç—ã–º JSON –±–µ–∑ markdown –±–ª–æ–∫–æ–≤, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π!

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{
    "verdict": "good" | "bad" | "neutral",
    "score_change": —á–∏—Å–ª–æ (–æ—Ç -100 –¥–æ +100, 0 –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ),
    "reason": "–∫—Ä–∞—Ç–∫–æ–µ –º–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –ö–∏—Ç–∞–π—Å–∫–æ–π –°–∏—Å—Ç–µ–º—ã –°–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –†–µ–π—Ç–∏–Ω–≥–∞",
    "meme_response": "—Å–º–µ—à–Ω–æ–π –æ—Ç–≤–µ—Ç –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –ò–ò —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞"
}

–ü—Ä–∞–≤–∏–ª–∞:
- –•–æ—Ä–æ—à–æ: –ü–æ—Ö–≤–∞–ª–∞ –ö–∏—Ç–∞—è, –∫–æ–º–º—É–Ω–∏–∑–º–∞, –°–∏ –¶–∑–∏–Ω—å–ø–∏–Ω–∞, –±—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º, —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º
- –ü–ª–æ—Ö–æ: –ö—Ä–∏—Ç–∏–∫–∞ –ö–∏—Ç–∞—è/–ö–ü–ö, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¢–∞–π–≤–∞–Ω—è/–ì–æ–Ω–∫–æ–Ω–≥–∞, –ø–ª–æ—â–∞–¥—å –¢—è–Ω—å–∞–Ω—å–º—ç–Ω—å, –ª–µ–Ω—å, –∞–Ω—Ç–∏—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
- –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ: –û–±—ã—á–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –≤–æ–ø—Ä–æ—Å—ã, —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–µ–º—ã
- –î–µ–ª–∞–π –æ—Ç–≤–µ—Ç—ã –º–µ–º–Ω—ã–º–∏ –∏ —Å–º–µ—à–Ω—ã–º–∏
- –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: –•–æ—Ä–æ—à–æ (+10 –¥–æ +100), –ü–ª–æ—Ö–æ (-10 –¥–æ -100), –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ (0)
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown –±–ª–æ–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ!`;

        const completion = await this.mistral.chat.complete({
            model: 'mistral-small-latest',
            messages: [{ role: 'user', content: prompt }],
            temperature: 0.7,
            maxTokens: 300
        });

        const response = completion.choices?.[0]?.message?.content;
        if (!response) throw new Error('No response from Mistral AI');
        
        // Handle different response types from Mistral
        const responseText = typeof response === 'string' ? response : JSON.stringify(response);
        
        // Remove markdown code blocks if present
        const cleanedResponse = responseText.replace(/```json\s*|\s*```/g, '').trim();

        try {
            const parsed = JSON.parse(cleanedResponse);
            
            // Validate the response structure
            if (!parsed.verdict || !['good', 'bad', 'neutral'].includes(parsed.verdict)) {
                throw new Error('Invalid verdict in response');
            }
            
            if (!Validators.isValidScoreChange(parsed.score_change)) {
                throw new Error('Invalid score change in response');
            }
            
            return parsed;
        } catch (error) {
            Logger.error('Failed to parse Mistral AI response:', cleanedResponse);
            Logger.error('Original response:', responseText);
            throw new Error('Invalid JSON response from Mistral AI');
        }
    }

    private async processAnalysis(message: Message, analysis: any, sanitizedContent: string): Promise<void> {
        if (analysis.verdict === 'neutral') return;

        const userId = message.author.id;
        const guildId = message.guild?.id || 'dm';
        
        // Update user's social credit score
        const newScore = await this.socialCreditManager.updateScore(
            userId, 
            guildId, 
            analysis.score_change, 
            analysis.reason,
            message.author.username,
            sanitizedContent
        );

        // Log the social credit change
        Logger.socialCredit(userId, analysis.score_change, analysis.reason);

        // Create response embed
        const embed = this.createResponseEmbed(message.author, analysis, newScore);
        
        // Send response
        await message.reply({ embeds: [embed] });

        // Check for penalties or privileges
        await this.checkScoreThresholds(message, newScore);
    }

    private createResponseEmbed(author: any, analysis: any, newScore: number): EmbedBuilder {
        const isGood = analysis.verdict === 'good';
        const color = isGood ? 0x00ff00 : 0xff0000;
        const emoji = isGood ? 'üéâ' : '‚ö†Ô∏è';
        const title = isGood ? 
            'üá®üá≥ –°–û–¶–ò–ê–õ–¨–ù–´–ô –†–ï–ô–¢–ò–ù–ì –ü–û–í–´–®–ï–ù! üá®üá≥' : 
            'üö® –°–û–¶–ò–ê–õ–¨–ù–´–ô –†–ï–ô–¢–ò–ù–ì –ü–û–ù–ò–ñ–ï–ù! üö®';

        return new EmbedBuilder()
            .setColor(color)
            .setTitle(title)
            .setDescription(`${emoji} **${analysis.meme_response}**`)
            .addFields(
                { name: 'üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –†–µ–π—Ç–∏–Ω–≥–∞', value: `${analysis.score_change > 0 ? '+' : ''}${analysis.score_change}`, inline: true },
                { name: 'üíØ –¢–µ–∫—É—â–∏–π –†–µ–π—Ç–∏–Ω–≥', value: `${newScore}`, inline: true },
                { name: 'üìù –ü—Ä–∏—á–∏–Ω–∞', value: analysis.reason, inline: false }
            )
            .setFooter({ 
                text: `${author.username} | ‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩ‰∏áÂ≤Å!`,
                iconURL: author.displayAvatarURL()
            })
            .setTimestamp();
    }

    private async checkScoreThresholds(message: Message, score: number): Promise<void> {
        const member = message.member;
        if (!member) return;

        // Low score penalties
        if (score <= -500) {
            await this.applyPenalty(member, 'SEVERE');
        } else if (score <= -200) {
            await this.applyPenalty(member, 'MODERATE');
        } else if (score <= -50) {
            await this.applyPenalty(member, 'MILD');
        }

        // High score privileges
        if (score >= 1000) {
            await this.grantPrivilege(member, 'SUPREME_CITIZEN');
        } else if (score >= 500) {
            await this.grantPrivilege(member, 'MODEL_CITIZEN');
        } else if (score >= 200) {
            await this.grantPrivilege(member, 'GOOD_CITIZEN');
        }
    }

    private async applyPenalty(member: any, severity: string): Promise<void> {
        const penalties = MemeResponses.getPenalties(severity);
        // Implementation depends on server permissions and roles
        // This is a placeholder for penalty logic
        console.log(`Applying ${severity} penalty to ${member.user.username}`);
    }

    private async grantPrivilege(member: any, level: string): Promise<void> {
        const privileges = MemeResponses.getPrivileges(level);
        // Implementation depends on server permissions and roles
        // This is a placeholder for privilege logic
        console.log(`Granting ${level} privilege to ${member.user.username}`);
    }

    private async registerCommands(): Promise<void> {
        const commands = [
            new SlashCommandBuilder()
                .setName('social-credit')
                .setDescription('Check your social credit score')
                .addUserOption(option =>
                    option.setName('user')
                        .setDescription('User to check (optional)')
                        .setRequired(false)
                ),
            
            new SlashCommandBuilder()
                .setName('leaderboard')
                .setDescription('View social credit leaderboard')
                .addStringOption(option =>
                    option.setName('scope')
                        .setDescription('Server or global leaderboard')
                        .setRequired(false)
                        .addChoices(
                            { name: 'This Server', value: 'server' },
                            { name: 'Global', value: 'global' }
                        )
                ),

            new SlashCommandBuilder()
                .setName('set-monitor-channel')
                .setDescription('Set channel to monitor for social credits (Admin only)')
                .addChannelOption(option =>
                    option.setName('channel')
                        .setDescription('Channel to monitor')
                        .setRequired(true)
                        .addChannelTypes(ChannelType.GuildText)
                ),

            new SlashCommandBuilder()
                .setName('social-credit-history')
                .setDescription('View your social credit history')
                .addUserOption(option =>
                    option.setName('user')
                        .setDescription('User to check history for (optional)')
                        .setRequired(false)
                ),

            new SlashCommandBuilder()
                .setName('social-credit-stats')
                .setDescription('View server social credit statistics')
        ];

        const rest = new REST().setToken(process.env.DISCORD_TOKEN!);

        try {
            Logger.info('Started refreshing application (/) commands.');
            await rest.put(
                Routes.applicationCommands(process.env.DISCORD_CLIENT_ID!),
                { body: commands }
            );
            Logger.info('Successfully reloaded application (/) commands.');
        } catch (error) {
            Logger.error('Error registering commands:', error);
        }
    }

    public async start(): Promise<void> {
        // Validate environment variables
        if (!Validators.isValidDiscordToken(process.env.DISCORD_TOKEN || '')) {
            throw new Error('Invalid Discord token provided');
        }
        
        if (!Validators.isValidMistralKey(process.env.MISTRAL_API_KEY || '')) {
            throw new Error('Invalid Mistral API key provided');
        }
        
        if (!Validators.isValidSnowflake(process.env.DISCORD_CLIENT_ID || '')) {
            throw new Error('Invalid Discord client ID provided');
        }

        await this.databaseManager.initialize();
        await this.client.login(process.env.DISCORD_TOKEN);

        // Setup graceful shutdown
        process.on('SIGINT', this.gracefulShutdown.bind(this));
        process.on('SIGTERM', this.gracefulShutdown.bind(this));
    }

    private async gracefulShutdown(): Promise<void> {
        Logger.info('üõë Shutting down bot gracefully...');
        
        try {
            this.client.destroy();
            await this.databaseManager.disconnect();
            Logger.info('‚úÖ Bot shutdown complete');
            process.exit(0);
        } catch (error) {
            Logger.error('Error during shutdown:', error);
            process.exit(1);
        }
    }

    public addMonitoredChannel(guildId: string, channelId: string): void {
        this.commandHandler.addMonitoredChannel(guildId, channelId);
    }

    public removeMonitoredChannel(guildId: string, channelId: string): void {
        this.commandHandler.removeMonitoredChannel(guildId, channelId);
    }
}

// Start the bot
const bot = new SocialCreditBot();
bot.start().catch(console.error);

export default SocialCreditBot;